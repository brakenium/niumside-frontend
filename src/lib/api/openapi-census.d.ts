/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/count/{game}/{collection}": {
    /**
     * /count/{game}/{collection}
     * @description Lists the number of entries in the given collection.
     * This endpoint can be used to determine an appropriate pagination strategy based on the size of the result list, but it is especially useful for API introspection as it still supports query strings, including search modifiers and certain query commands.
     * For example, the `weapon` collection may be queried with `c:has=heat_capacity` to get the number of heat-based weapons. Similarly, comparing the `c:has=<field>` count of a collection with the total can be used to guess whether a field is optional or used.
     * Client code should be ready to receive negative values for this endpoint, which is used as the error state for this endpoint, rather than the explicit error payloads sent for the `/get/` query verb.
     */
    get: operations["count_generic"];
  };
  "/get/{game}": {
    /**
     * /get/{game}
     * @description Top-level endpoint for retrieving all available collections for the current game namespace.
     * In addition to the name of the collection, this endpoint may also list the number of entries in the associated table via the `count` field. Note that the `hidden` field is of no practical use to API consumers as it is always `false`.
     * The keys in the `resolve_list` field are permittable values for the `c:resolve=<field>` query command. Note that resolve lists precede the `c:join=<...>` subquery system and has been largely superceded by it. For this reason, the resolved fields are not included in any example payload or other parts of this documentation.
     * Curious fact: this is one of the few endpoints in the PlanetSide 2 API that returns native JSON types (`boolean`, `number`, etc.) in its response, without wrapping them in a string.
     */
    get: operations["get_collections"];
  };
  "/get/{game}/ability": {
    /**
     * ability
     * @description An ability triggered by a character or vehicle.
     *
     * Abilities in the API are more generic than the in-game abilities and also cover other mechanics such as scopes and consumables.
     *
     * The generic fields `paramX` and `stringX` are documented in the the corresponding `ability_type` entry."
     */
    get: operations["get_ability"];
  };
  "/get/{game}/ability_type": {
    /**
     * ability_type
     * @description A type of ability.
     *
     * The generic fields `paramX` and `stringX` are documented here. Note that most of these generic fields are currently not used.
     */
    get: operations["get_ability_type"];
  };
  "/get/{game}/achievement": {
    /**
     * achievement
     * @description Endpoint for weapon medals and service ribbons.
     *
     * There is no "achievement type" collection or field, but they can be grouped by the `repeatable` field, which is only true for service ribbons.
     */
    get: operations["get_achievement"];
  };
  "/get/{game}/armor_facing": {
    /**
     * armor_facing
     * @description Enumerates the armor facing angles used for directional damage reduction on vehicles.
     */
    get: operations["get_armor_facing"];
  };
  "/get/{game}/armor_info": {
    /**
     * armor_info
     * @description A set of armor values for each armor facing angle on a vehicle.
     */
    get: operations["get_armor_info"];
  };
  "/get/{game}/character": {
    /**
     * character
     * @description Game-specific documentation for the `character` collection.
     *
     * This collection is randomly distributed across 20 different databases, causing some unusual behaviour when filtering. For example, the `c:distinct` parameter will fetch the distinct values for each database and aggregate them in the response, resulting in duplicate entries.
     *
     * In addition to the commonly-used parameters provided, this endpoint may be queried by any of its fields, including sub-keys like `times.creation`.
     */
    get: operations["get_character"];
  };
  "/get/{game}/character_name": {
    /**
     * character_name
     * @description Optimized, low-bandwidth endpoint for character name resolution.
     */
    get: operations["get_character_name"];
  };
  "/get/{game}/characters_achievement": {
    /**
     * characters_achievement
     * @description List the achievement progress for a character.
     */
    get: operations["get_characters_achievement"];
  };
  "/get/{game}/characters_currency": {
    /**
     * characters_currency
     * @description Lists the currencies owned by a character.
     *
     * Note that this table has been inconsistent since the introduction of the A.S.P. system: in addition to the currency value (Nanites), an extra `prestige_currency` key has been added, rather than being its own currency.
     */
    get: operations["get_characters_currency"];
  };
  "/get/{game}/characters_directive": {
    /**
     * characters_directive
     * @description Directive completion information for a character.
     *
     * Note that this also lists entries for incomplete directives; use the `completion_time` field to determine whether a directive has been completed.
     */
    get: operations["get_characters_directive"];
  };
  "/get/{game}/characters_directive_objective": {
    /**
     * characters_directive_objective
     * @description Current progress of a character within a directive.
     *
     * The current value of the directive progress can be found in the `state_data` field of this endpoint. The corresponding target value is found in the corresponding `objective`, usually in the `param1` field.
     */
    get: operations["get_characters_directive_objective"];
  };
  "/get/{game}/characters_directive_tier": {
    /**
     * characters_directive_tier
     * @description Directive tier completion information for a character.
     */
    get: operations["get_characters_directive_tier"];
  };
  "/get/{game}/characters_directive_tree": {
    /**
     * characters_directive_tree
     * @description Directive tree completion information for a character.
     */
    get: operations["get_characters_directive_tree"];
  };
  "/get/{game}/characters_event": {
    /**
     * characters_event
     * @description ReST endpoint for retrieving historical character event data.
     *
     * Like `event`, but allows querying by character. The `character_id` and `id` fields are interchangeable.
     */
    get: operations["get_characters_event"];
  };
  "/get/{game}/characters_event_grouped": {
    /**
     * characters_event_grouped
     * @description Return character vs. character statistics.
     *
     * Allows calculating player vs. player KDR.
     */
    get: operations["get_characters_event_grouped"];
  };
  "/get/{game}/characters_friend": {
    /**
     * characters_friend
     * @description Query the friends list of a character.
     */
    get: operations["get_characters_friend"];
  };
  "/get/{game}/characters_item": {
    /**
     * characters_item
     * @description Query the items of a character. Note that this collection no longer lists account-wide item unlocks as this served as a fingerprint to identify players across multiple characters.
     */
    get: operations["get_characters_item"];
  };
  "/get/{game}/characters_leaderboard": {
    /**
     * characters_leaderboard
     * @description Query the leaderboard for a character. Note that only the top 10'000 players for a given statistic are tracked in the leaderboard; many characters will not have an entry in this collection.
     *
     * The `limit` key inserted into the response indicates the number of requested entries when passing multiple character IDs. Comparison with `returned` may be used to determine whether any characters were skipped due to not being in the leaderboard.
     */
    get: operations["get_characters_leaderboard"];
  };
  "/get/{game}/characters_online_status": {
    /**
     * characters_online_status
     * @description Query the online status of a character.
     */
    get: operations["get_characters_online_status"];
  };
  "/get/{game}/characters_skill": {
    /**
     * characters_skill
     * @description List the skills unlocked by a character.
     */
    get: operations["get_characters_skill"];
  };
  "/get/{game}/characters_stat": {
    /**
     * characters_stat
     * @description Basic statistics endpoint for character-wide and class-specific
     * statistics.
     *
     * - `stat_name` lists the name of the stat
     * - `profile` represents the class, with a value of 0 denoting a character-wide value
     */
    get: operations["get_characters_stat"];
  };
  "/get/{game}/characters_stat_by_faction": {
    /**
     * characters_stat_by_faction
     * @description Faction-specific statistics endpoint. Useful for determining faction bias or kill spread.
     *
     * - `stat_name` lists the name of the stat
     * - `profile` represents the class, with a value of 0 denoting a character-wide value
     *
     * All `value_*` fields are provided per-faction. Note that the value for the own faction is
     * often blanked: `value_nc` of the stat `kills` cannot be used to enumerate an NC character's
     * team kills, for example.
     */
    get: operations["get_characters_stat_by_faction"];
  };
  "/get/{game}/characters_stat_history": {
    /**
     * characters_stat_history
     * @description Statistics endpoint for historical character stats. In addition to the `all_time` and
     * `one_life_max` keys, values are also provided for the last 31 days (`day`), 12 months
     * (`month`), or 13 weeks (`week`).
     *
     * - `stat_name` lists the name of the stat
     * - `profile` represents the class, with a value of 0 denoting a character-wide value
     */
    get: operations["get_characters_stat_history"];
  };
  "/get/{game}/characters_weapon_stat": {
    /**
     * characters_weapon_stat
     * @description Weapon statistics endpoint containing generic values such as playtime or score while
     * wielding. The most common use is calculating the accuracy of a player with a given weapon
     * by dividing `weapon_hit_count` by `weapon_fire_count`.
     *
     * - `stat_name` lists the name of the stat
     * - `item_id` identifies the item for the weapon. Note that this value can be zero, in that
     *   case it serves as a catch-all for all weapons for the given `vehicle_id`.
     * - `vehicle_id` the vehicle on which the weapon is available.
     */
    get: operations["get_characters_weapon_stat"];
  };
  "/get/{game}/characters_weapon_stat_by_faction": {
    /**
     * characters_weapon_stat_by_faction
     * @description Faction-specific weapon statistics endpoint containing combat-focussed stats such as kills,
     * deaths, headshots and damage dealt/taken.
     *
     * - `stat_name` lists the name of the stat
     * - `item_id` identifies the item for the weapon. Note that this value can be zero, in that
     *   case it serves as a catch-all for all weapons for the given `vehicle_id`.
     * - `vehicle_id` the vehicle on which the weapon is available.
     */
    get: operations["get_characters_weapon_stat_by_faction"];
  };
  "/get/{game}/characters_world": {
    /**
     * characters_world
     * @description Query the server a character is on.
     */
    get: operations["get_characters_world"];
  };
  "/get/{game}/currency": {
    /**
     * currency
     * @description Lists currencies available in the game.
     *
     * As of 2023-06-13, the only currency available are Nanites. Outfit resources and other currencies such as Daybreak Cash, ISO-4, or A7 are not available on the API, while Cert Points and A.S.P. tokens are stored in the `character` collection.
     */
    get: operations["get_currency"];
  };
  "/get/{game}/directive": {
    /**
     * directive
     * @description An individual directive that may be completed by a player.
     *
     * This collection lists an individual directive, such as "100 Roadkills".
     */
    get: operations["get_directive"];
  };
  "/get/{game}/directive_tier": {
    /**
     * directive_tier
     * @description A completion tier within a directive tree.
     *
     * This covers the individual stages of directive tiers, such as "Combat Medic: Adept".
     */
    get: operations["get_directive_tier"];
  };
  "/get/{game}/directive_tree": {
    /**
     * directive_tree
     * @description A tree of directives sorted into multiple tiers.
     *
     * This collection represents the individual paths within a directive category, such as "Light Assault" or "Combat Medic".
     */
    get: operations["get_directive_tree"];
  };
  "/get/{game}/directive_tree_category": {
    /**
     * directive_tree_category
     * @description Top-level categorisation of directive trees.
     *
     * This covers the main sections in the Directive menu, such as "Infantry", "Vehicles", or "Events".
     */
    get: operations["get_directive_tree_category"];
  };
  "/get/{game}/effect": {
    /**
     * effect
     * @description A weapon-based effect acting on players or vehicles.
     *
     * Weapon-based effects include direct and indirect damage effects, tactical grenade impacts, as well as pseudo-weapons such as the Medic tool or Engineer repair tool. For world-based effects, weapon attachments and buffs, see the `zone_effect` collection instead.
     *
     * See the `effect_type` collection for a list of available effect types.
     */
    get: operations["get_effect"];
  };
  "/get/{game}/effect_type": {
    /**
     * effect_type
     * @description A type of effect.
     *
     * The generic fields `paramX` and `stringX` are documented here. Note that not all fields are used by all effect types, or at all.
     */
    get: operations["get_effect_type"];
  };
  "/get/{game}/empire_scores": {
    /**
     * empire_scores (Defunct)
     * @description Defunct endpoint for the "World Domination Series" event scores.
     */
    get: operations["get_empire_scores"];
  };
  "/get/{game}/event": {
    /**
     * event
     * @description ReST endpoint for retrieving historical event data.
     *
     * These largely mirror the corresponding events in the ESS:
     *
     * - `ItemAdded` -> `ITEM`
     * - `Death` -> `KILL`/`DEATH`
     * - `BattleRankUp` -> `BATTLE_RANK`
     * - `PlayerFacilityCapture`/`PlayerFacilityDefend` -> `FACILITY_CHARACTER`
     * - `AchievementEarned` -> `ACHIEVEMENT`
     * - `FacilityControl` -> `FACILITYCONTROL`
     * - `MetagameEvent` -> `METAGAME`"
     */
    get: operations["get_event"];
  };
  "/get/{game}/experience": {
    /**
     * experience
     * @description Lists the different types of experience ticks.
     */
    get: operations["get_experience"];
  };
  "/get/{game}/experience_rank": {
    /**
     * experience_rank
     * @description Player rank gained through leveling up.
     *
     * Note that the `rank` field is not unique, as each rank is duplicated for each prestige (aka. A.S.P.) level. The prestige entries can only be distinguished by their icons.
     */
    get: operations["get_experience_rank"];
  };
  "/get/{game}/facility_link": {
    /**
     * facility_link
     * @description Resolves lattice links between facilities.
     *
     * There is no reliable difference between `facility_id_a` and `facility_id_b`; the former tends to be closer to the respective warpgate, but this does not hold true for all links. It is recommended to treat the link direction as arbitrary.
     */
    get: operations["get_facility_link"];
  };
  "/get/{game}/facility_type": {
    /**
     * facility_type
     * @description Lists all facility types across all zones and game modes.
     */
    get: operations["get_facility_type"];
  };
  "/get/{game}/faction": {
    /**
     * faction
     * @description Endpoint for playable and non-playable factions.
     * In addition to the main empires VS, NC, and TR, this also lists NS Operatives as the 4th faction. Note that a faction ID of zero does not denote an empty value. Instead, it represents a special "None" faction, which is used for common pool equipment, and also serves as a sentinel value for disabled facilities in the context of facility ownership.
     * When working with the Event Streaming Service (ESS), you will encounter a `team_id` field in certain payloads. This is used to control friend-or-foe status for NSO players, or for the opposing factions in Outfit Wars.
     * During regular gameplay (i.e. outside of Outfit Wars), it is generally safe to treat a team ID as a faction. However, care should be taken during Outfit Wars matches as the team IDs will map to the Alpha and Omega team instead.
     */
    get: operations["get_faction"];
  };
  "/get/{game}/fire_group": {
    /**
     * fire_group
     * @description Fire groups in the API are synonymous with fire modes in-game, they represent the different operating modes some weapons can switch between.
     *
     * This includes select-fire modes for infantry weapons, as well as knives switching between quick knife, wielded knive, and - in the case of power knives - the one-hit-kill mode.
     */
    get: operations["get_fire_group"];
  };
  "/get/{game}/fire_mode": {
    /**
     * fire_group (Legacy)
     * @description **Note:** This table has been largely superceded by `fire_mode_2`, which contains additional and more accurate information about firing mechanics.
     *
     * This endpoint shows detailed information about a given fire mode for a weapon, including damage ranges, muzzle velocity, and reload time.
     *
     * For details on the cone-of-fire mechanics, resolve the `player_state_group_id` field.
     */
    get: operations["get_fire_mode"];
  };
  "/get/{game}/fire_mode_2": {
    /**
     * fire_mode_2
     * @description Main endpoint for baseline weapon characteristics and firing mechanics. This includes:
     *
     * - Damage effects and ranges
     * - Recoil magnitude and pattern
     * - Triggered abilities for pseudo-weapons such as the medical applicator
     * - Ammunition consumption and pellet count
     * - Heat-mechanics
     *
     * Be aware that lockon information is currently disconnected from the game data and has not
     * been outdated. Refer to the PS2 Wiki for up-to-date information for the time being.
     */
    get: operations["get_fire_mode_2"];
  };
  "/get/{game}/fire_mode_to_projectile": {
    /**
     * fire_mode_to_projectile
     * @description Maps fire modes to their projectiles.
     */
    get: operations["get_fire_mode_to_projectile"];
  };
  "/get/{game}/fire_mode_type": {
    /**
     * fire_mode_type
     * @description Enumeration of the types of fire modes.
     *
     * This servers to differentiate between melee attacks, projectile weapons, throwables, and pseudo-weapon fire modes used to trigger activated items.
     */
    get: operations["get_fire_mode_type"];
  };
  "/get/{game}/image": {
    /**
     * image
     * @description Lists individual image assets available on the API.
     *
     * Note that historically, not all assets listed here are available on the image endpoint, and not all available assets are listed.
     */
    get: operations["get_image"];
  };
  "/get/{game}/image_set": {
    /**
     * image_set
     * @description Lists related image assets belonging to the same set.
     *
     * Note that this endpoint is a mapping; the `image_set_id` is not a unique key. The individual image types in a set are generally used to provide different sizes of the same image (e.g. icon previes or minimal icons).
     */
    get: operations["get_image_set"];
  };
  "/get/{game}/image_set_default": {
    /**
     * image_set_default
     * @description Lists the default image for a given image set.
     */
    get: operations["get_image_set_default"];
  };
  "/get/{game}/item": {
    /**
     * item
     * @description Items in PlanetSide 2 are used to represent weapons, tools, and consumables, but also cosmetic items and internal control objects for player renaming or outfit resource consumption. Use the `item_type` collection to narrow searches to specific types.
     */
    get: operations["get_item"];
  };
  "/get/{game}/item_attachment": {
    /**
     * item_attachment
     * @description Maps attachment items to the items they can be attached to.
     */
    get: operations["get_item_attachment"];
  };
  "/get/{game}/item_category": {
    /**
     * item_category
     * @description Item categories are used to group items together for display in the loadout screen or depot.
     */
    get: operations["get_item_category"];
  };
  "/get/{game}/item_profile": {
    /**
     * item_profile
     * @description Maps items to profiles (classes/vehicles) that have access to them.
     */
    get: operations["get_item_profile"];
  };
  "/get/{game}/item_to_weapon": {
    /**
     * item_to_weapon
     * @description Maps items (including name, availability) to its respective weapon object.
     *
     * Not all items have a weapon objects, though some filtering can be done through the `item_type_id` field, with the ID 26 representing most weapon types.
     */
    get: operations["get_item_to_weapon"];
  };
  "/get/{game}/item_type": {
    /**
     * item_type
     * @description Items in PlanetSide 2 represent many different things beyond weapons, such as implant packs, cosmetics, or name change tokens. They are also used as internal helpers when pulling outfit resources, spawning vehicles, or interacting with certain terminals.
     *
     * This collection lists the different item types, though many of these are never encountered on the API.
     */
    get: operations["get_item_type"];
  };
  "/get/{game}/leaderboard": {
    /**
     * leaderboard
     * @description Global leaderboard for a given server. This only includes the top 10'000 players for a given category and is not directly searchable. See `characters_leaderboard` to look up a character's ranking.
     *
     * `c:start` and `c:limit` are supported and allow for pagination. `c:join` and `c:tree` are also permitted. Any other query commands will be silently ignored.
     *
     * Unlike most other tables, this one defaults to a `c:limit` value of 10 and is always sorted in ascending order of leaderboard rank.
     */
    get: operations["get_leaderboard"];
  };
  "/get/{game}/loadout": {
    /**
     * loadout
     * @description Enumeration of the six infantry classes for each playable faction.
     *
     * Note that this is different from the in-game loadouts, which are not available on the API.
     */
    get: operations["get_loadout"];
  };
  "/get/{game}/map": {
    /**
     * map
     * @description Map status endpoint.
     *
     * This collection can only be queried with a single `world_id` and any number of `zone_ids` (note that the parameter is plural). Also note the non-standard payload format requiring different parsing rules.
     *
     * For partially locked continents, the unavailable regions will report a `FactionId` of zero.
     */
    get: operations["get_map"];
  };
  "/get/{game}/map_hex": {
    /**
     * map_hex
     * @description Endpoint for retrieving map hex coordinates.
     * This data can be used to reconstruct the in-game facility outlines from API data.
     *
     * The X and Y coordinates listed in the entries to this collection are not Cartesian and do not match up with the `location_<n>` fields of `map_region`. Instead, they are describing locations in a non-orthogonal hexagonal grid, which must be converted by the user.
     *
     * This website has a great write-up on hexagonal coordinate systems: <https://www.redblobgames.com/grids/hexagons/>.
     * The coordinate system used by PlanetSide 2 matches the "Axial coordinates" described in the article, except that the first coordinate X faces east, and the second coordinate Y faces up and to the right at a 60° angle.
     */
    get: operations["get_map_hex"];
  };
  "/get/{game}/map_region": {
    /**
     * map_region
     * @description A region on the in-game map.
     *
     * Map regions are largely identical to their corresponding regions, but use the internal `facility_name` instead of a localized string. A `map_region_id` and `region_id` are interchangeable.
     *
     * Additionally, this collection allows connecting facilities to map region IDs.
     *
     * Note that the continuous outfit resource gain is listed in "ticks", not minutes. Ticks are 5 minutes as of writing, meaning that a Tech Plant will list a tick reward of 8 Synthium, corresponding to the 1.6 Synthium per minute advertised in-game.
     */
    get: operations["get_map_region"];
  };
  "/get/{game}/marketing_bundle": {
    /**
     * marketing_bundle
     * @description Bundles available for purchase in the in-game store (Depot). This collection represents actual bundles. For pseudo-bundles used to purchase individual weapon attachments or cosmetics, see the `marketing_bundle_with_1_item` collection instead.
     *
     * Note that there is no guaranteed way of determining whether a given bundle is currently available for purchase. This collection contains many entries for defunct items and bundles, such as the single-use camos from the early days of the game.
     *
     * This collection is automatically maintained and generally accurate with regards to certification prices, the daybreak/station cash values are generally less reliable.
     */
    get: operations["get_marketing_bundle"];
  };
  "/get/{game}/marketing_bundle_item": {
    /**
     * marketing_bundle_item
     * @description Maps marketing bundles to the items they contain.
     */
    get: operations["get_marketing_bundle_item"];
  };
  "/get/{game}/marketing_bundle_with_1_item": {
    /**
     * marketing_bundle_with_1_item
     * @description These are pseudo-bundles with exactly 1 item each, allowing players to buy individual weapons or cosmetics with Daybreak Cash (formerly Station Cash).
     *
     * Note that in the case of weapons, these bundles are genreally mirrored by 'regular' bundles in the `marketing_bundle` collection, with the same `marketing_bundle_id`.
     */
    get: operations["get_marketing_bundle_with_1_item"];
  };
  "/get/{game}/metagame_event": {
    /**
     * metagame_event
     * @description In-game alerts and other alert-like events.
     *
     * Note that this endpoint lists alert types that are not currently enabled in-game, such as the 'Aerial Anomaly' and 'MAXimum Pressure' alert types.
     */
    get: operations["get_metagame_event"];
  };
  "/get/{game}/metagame_event_state": {
    /**
     * metagame_event_state
     * @description Enumeratess the available states for alerts.
     */
    get: operations["get_metagame_event_state"];
  };
  "/get/{game}/objective": {
    /**
     * objective
     * @description An objective tracking progress towards a directive, mission, or achievement.
     *
     * See the `objective_type` collection for a list of available objective types.
     */
    get: operations["get_objective"];
  };
  "/get/{game}/objective_set_to_objective": {
    /**
     * objective_set_to_objective
     * @description Maps objective sets to objective groups.
     *
     * This collection is peculiar as neither of the types it connects are available on the API. It is however essential for connecting the `directive` collection to `objective` and `objective_type`.
     *
     * Note that when joining to these queries, the `^on:` and `^to:` fields must be used to specify the relationship.
     */
    get: operations["get_objective_set_to_objective"];
  };
  "/get/{game}/objective_type": {
    /**
     * objective_type
     * @description A type of objective.
     *
     * The generic `paramX` fields are documented here. Note that not all fields are used by all objective types, or at all.
     */
    get: operations["get_objective_type"];
  };
  "/get/{game}/outfit": {
    /**
     * outfit
     * @description A player-run outfit or clan.
     */
    get: operations["get_outfit"];
  };
  "/get/{game}/outfit_member": {
    /**
     * outfit_member
     * @description Outfit membership information for a givne character. Characters that are not members of any outfit will not have an entry in this collection.
     */
    get: operations["get_outfit_member"];
  };
  "/get/{game}/outfit_member_extended": {
    /**
     * outfit_member_extended
     * @description Another variant of the `outfit_member` collection, but with the contents of the corresponding `outfit` merged in. This is useful for bulk lookups of outfit information for heterogenous lists of characters without requiring the explicit use of `c:join` or `c:resolve`.
     */
    get: operations["get_outfit_member_extended"];
  };
  "/get/{game}/outfit_rank": {
    /**
     * outfit_rank
     * @description Outfits can define their own custom rank names and permissions, which are listed here. Outfits using the default rank names may not have an entry here.
     */
    get: operations["get_outfit_rank"];
  };
  "/get/{game}/profile": {
    /**
     * profile (Infantry)
     * @description Original endpoint for infantry profiles. This covers the names and loadout IDs connected to a given profile, and additionally provides movement speed multiplier information for infantry classes. Note that the key fields are also provided by `profile_2`, which not only covers infantry but also vehicles, deployables, and other entities.
     */
    get: operations["get_profile"];
  };
  "/get/{game}/profile_2": {
    /**
     * profile_2 (All)
     * @description Extended profile endpoint containing all entity types, including NPCs, construction items, and deployables.
     */
    get: operations["get_profile_2"];
  };
  "/get/{game}/profile_armor_map": {
    /**
     * profile_armor_map
     * @description Maps profiles to the relevant `armor_info` entries.
     *
     * Note that many of the IDs used here are only available in `profile_2`. Additionally, armor values only concern vehicles, with infantry and deployable classes not having any entries here.
     */
    get: operations["get_profile_armor_map"];
  };
  "/get/{game}/profile_resist_map": {
    /**
     * profile_resist_map
     * @description Maps profiles to the relevant `resist_info` entries. Note that many of the profile IDs used here are only available in the `profile_2` collection.
     */
    get: operations["get_profile_resist_map"];
  };
  "/get/{game}/projectile": {
    /**
     * projectile
     * @description Projectiles specify the travel characteristics of a weapon on its way to the target, such as its speed, its bullet drop, or maximum flight time/distance.
     *
     * Note that multiple fire modes can use the same projectile. This usually includes the hipfire vs. aimed fire modes, but can also include different weapons altogether.
     */
    get: operations["get_projectile"];
  };
  "/get/{game}/projectile_flight_type": {
    /**
     * projectile_flight_type
     * @description Enumerates the flight types used to categorize projectiles by their travel characteristics.
     *
     * This mostly controls whether the projectile is ballistic, Flak-based, or "Dynamic", used to represent thrown items such as grenades, explosives, and ammo packs.
     */
    get: operations["get_projectile_flight_type"];
  };
  "/get/{game}/region": {
    /**
     * region
     * @description Display name of the game regions.
     *
     * This endpoint mostly contains the localized display name of the a map region. Regions and map regions are interchangeable and governed by the same IDs.
     */
    get: operations["get_region"];
  };
  "/get/{game}/resist_info": {
    /**
     * resist_info
     * @description Lists resistances against certain types of damage.
     */
    get: operations["get_resist_info"];
  };
  "/get/{game}/resist_type": {
    /**
     * resist_type
     * @description Enumeration of resistance types used to balance damage types against various targets.
     */
    get: operations["get_resist_type"];
  };
  "/get/{game}/resource_type": {
    /**
     * resource_type
     * @description Resources consumed by abilities such as the Heavy Overshield.
     */
    get: operations["get_resource_type"];
  };
  "/get/{game}/reward": {
    /**
     * reward
     * @description A reward granted for completing a directive, mission, or achievement.
     */
    get: operations["get_reward"];
  };
  "/get/{game}/reward_group_to_reward": {
    /**
     * reward_group_to_reward
     * @description Maps a reward group to one or more rewards.
     *
     * This collection, together with `reward_set_to_reward_group`, allows connecting directive tiers to the rewards they grant upon completion.
     */
    get: operations["get_reward_group_to_reward"];
  };
  "/get/{game}/reward_set_to_reward_group": {
    /**
     * reward_set_to_reward_group
     * @description Maps a reward set to its reward group.
     *
     * This collection, together with `reward_group_to_reward`, allows connecting directive tiers to the rewards they grant upon completion.
     */
    get: operations["get_reward_set_to_reward_group"];
  };
  "/get/{game}/reward_type": {
    /**
     * reward_type
     * @description A type of reward.
     *
     * The generic `paramX` fields are documented here. Note that not all fields are used by all reward types, or at all.
     */
    get: operations["get_reward_type"];
  };
  "/get/{game}/single_character_by_id": {
    /**
     * single_character_by_id
     * @description Endpoint for retrieving bulk character stats.
     *
     * This endpoint's payload is a superset of `character` and additionally includes data from
     * related `characters_*` collections:
     *
     * - `characters_currency`
     * - `characters_stat_history`
     * - `characters_stat`
     * - `characters_stat_by_faction`
     * - `characters_weapon_stat`
     * - `characters_weapon_stat_by_faction`
     * - `characters_items`
     *
     * This endpoint is generally faster than querying these collections individually, but it
     * comes with significant bandwidth costs. Note that this endpoint does not support most query
     * commands, and that `c:show` and `c:hide` cannot be used to reduce the amount of data
     * returned.
     */
    get: operations["get_single_character_by_id"];
  };
  "/get/{game}/skill": {
    /**
     * skill
     * @description Purchasable skills, such as certifications and A.S.P. skills.
     */
    get: operations["get_skill"];
  };
  "/get/{game}/skill_category": {
    /**
     * skill_category
     * @description Skill categories represent a grouping of skills.
     *
     * They usually group skills by the loadout slots for which they provide items, such as "Passive Systems" or "Ability Slot". On weapons, they generally represent a given attachment slot.
     */
    get: operations["get_skill_category"];
  };
  "/get/{game}/skill_line": {
    /**
     * skill_line
     * @description Skill lines represent upgrade paths for skills, such as Ammo Capacity.
     */
    get: operations["get_skill_line"];
  };
  "/get/{game}/skill_set": {
    /**
     * skill_set
     * @description Skill sets represent the top-level grouping of skills.
     *
     * In the old certification menu, this would group weapon-related skill lines into a sub-tree beneath the weapon itself.
     */
    get: operations["get_skill_set"];
  };
  "/get/{game}/target_type": {
    /**
     * target_type
     * @description Enumerates the target types used to categorize the applicable targets of a weapon or effect.
     *
     * This is effectively a constant mapping and can be cached aggressively.
     */
    get: operations["get_target_type"];
  };
  "/get/{game}/title": {
    /**
     * title
     * @description Selectable titles for a character.
     *
     * Note that title IDs of 0 signify no title being selected.
     */
    get: operations["get_title"];
  };
  "/get/{game}/vehicle": {
    /**
     * vehicle
     * @description Basic vehicle information such as name, description, and type.
     *
     * Note that vehicle types are only used internally and are not directly tied to damage mechanics or resistances. Liberators and Galaxies are still considered "Light Aircraft" in this endpoint.
     */
    get: operations["get_vehicle"];
  };
  "/get/{game}/vehicle_attachment": {
    /**
     * vehicle_attachment
     * @description Maps items to the vehicles and factions that have access to them.
     *
     * The `slot_id` field is used to identify where the item is attached to. The below list shows
     * the types of items for each slot as of June 2023:
     *
     * ```
     * ID   Description
     *
     * 1    Primary Weapon
     * 2    Secondary Weapon
     * 3    Ability Slot
     * 4    Defensive Slot
     * 5    Chassis / Airframe
     * 6    Cockpit / Hood Ornament
     * 7    Camo
     * 8    Decal
     * 9    Exterior
     * 10   Weapon Slot / Catapult
     * 11   Weapon Slot / Catapult
     * 12   Afterburner / Nitrous
     * 13   (Unused)
     * 14   (Internal: Headlights)
     * 15   Horn
     * 16   Trim
     * 17   Lighting
     * 18   Hubcaps
     * 19   Other
     * 20   Tire Traits / Catapult
     * 21   Catapult
     * 22   Catapult
     * ```
     *
     * Note that this list is maintained manually and may be out of date. The slot associations
     * are not available on the API.
     */
    get: operations["get_vehicle_attachment"];
  };
  "/get/{game}/vehicle_faction": {
    /**
     * vehicle_faction
     * @description Maps vehicles to the factions that have access to them.
     */
    get: operations["get_vehicle_faction"];
  };
  "/get/{game}/vehicle_skill_set": {
    /**
     * vehicle_skill_set
     * @description Maps vehicles to the skill sets that they use.
     *
     * Note that this relationship is expressed for each faction separetly.
     */
    get: operations["get_vehicle_skill_set"];
  };
  "/get/{game}/weapon": {
    /**
     * weapon
     * @description Baseline weapon data, such as equip times, stock sights, and movement speed modifiers.
     */
    get: operations["get_weapon"];
  };
  "/get/{game}/weapon_ammo_slot": {
    /**
     * weapon_ammo_slot
     * @description Ammo slot data for a given weapon, including the clip size, reserve ammo capacity, and resupply behaviour.
     */
    get: operations["get_weapon_ammo_slot"];
  };
  "/get/{game}/weapon_datasheet": {
    /**
     * weapon_datasheet (Deprecated)
     * @description **Deprecated:** This table is not directly tied to the underlying fire mode and player state group data and may differ wildly from the true values!
     *
     * Suggested alternatives for the values provided by this collection are listed as part of the `weapon_datasheet` schema.
     */
    get: operations["get_weapon_datasheet"];
  };
  "/get/{game}/weapon_to_attachment": {
    /**
     * weapon_to_attachment
     * @description Maps weapons to the attachments available to them. This table is largely synonymous with `item_attachment`, but contains additional entries that may not resolve to a valid item.
     *
     * For this reason, it is recommended to base any attachment queries on the `item_attachment` endpoint instead.
     */
    get: operations["get_weapon_to_attachment"];
  };
  "/get/{game}/weapon_to_fire_group": {
    /**
     * weapon_to_fire_group
     * @description Maps weapons to their set of fire groups. The `fire_group_index` field matches the in-game fire mode selection; hitting 'B' in-game is equivalent to incrementing the index by 1.
     */
    get: operations["get_weapon_to_fire_group"];
  };
  "/get/{game}/world": {
    /**
     * world
     * @description A game server for a given region and game.
     */
    get: operations["get_world"];
  };
  "/get/{game}/world_event": {
    /**
     * world_event
     * @description ReST endpoint for retrieving historical world events.
     *
     * The `world_id` and `id` fields are interchangeable.
     */
    get: operations["get_world_event"];
  };
  "/get/{game}/world_stat_history": {
    /**
     * world_stat_history (Defunct)
     * @description Historical data for a given global event.
     */
    get: operations["get_world_stat_history"];
  };
  "/get/{game}/zone": {
    /**
     * zone
     * @description World continent and dynamic zone information.
     */
    get: operations["get_zone"];
  };
  "/get/{game}/zone_effect": {
    /**
     * zone_effect
     * @description Passive effects such as weapon stat modifications from attachments or equipped skills.
     *
     * For weapon damage effects, see `effect` instead. See the `zone_effect_type` collection for a list of available zone effect types.
     */
    get: operations["get_zone_effect"];
  };
  "/get/{game}/zone_effect_type": {
    /**
     * zone_effect_type
     * @description A type of zone effect.
     *
     * The generic fields `paramX` and `stringX` are documented here. Note that not all fields are used by all zone effect types, or at all.
     */
    get: operations["get_zone_effect_type"];
  };
  "/get/{game}/{collection}": {
    /**
     * /get/{game}/{collection}
     * @description This endpoint documents generic parameters available on most collections.
     *
     * For details on collection-specific variables and response schemas, please see the respective collection's query entry.
     */
    get: operations["get_generic"];
  };
}

export type webhooks = Record<string, never>;

export type components = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * /count/{game}/{collection}
   * @description Lists the number of entries in the given collection.
   * This endpoint can be used to determine an appropriate pagination strategy based on the size of the result list, but it is especially useful for API introspection as it still supports query strings, including search modifiers and certain query commands.
   * For example, the `weapon` collection may be queried with `c:has=heat_capacity` to get the number of heat-based weapons. Similarly, comparing the `c:has=<field>` count of a collection with the total can be used to guess whether a field is optional or used.
   * Client code should be ready to receive negative values for this endpoint, which is used as the error state for this endpoint, rather than the explicit error payloads sent for the `/get/` query verb.
   */
  count_generic: {
    parameters: {
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
        /** @description Name of the collection to access. */
        collection: "character" | "world" | "zone";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            count?: number;
          };
        };
      };
      /** @description Returns `{"count": -1}` on error */
      "4XX": never;
    };
  };
  /**
   * /get/{game}
   * @description Top-level endpoint for retrieving all available collections for the current game namespace.
   * In addition to the name of the collection, this endpoint may also list the number of entries in the associated table via the `count` field. Note that the `hidden` field is of no practical use to API consumers as it is always `false`.
   * The keys in the `resolve_list` field are permittable values for the `c:resolve=<field>` query command. Note that resolve lists precede the `c:join=<...>` subquery system and has been largely superceded by it. For this reason, the resolved fields are not included in any example payload or other parts of this documentation.
   * Curious fact: this is one of the few endpoints in the PlanetSide 2 API that returns native JSON types (`boolean`, `number`, etc.) in its response, without wrapping them in a string.
   */
  get_collections: {
    parameters: {
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            datatype_list?: ({
                /** @description The number of entries in this colleciton. The values `?` and `dynamic` both signify an uncountable collection. Note that even though no count is displayed here, it may still be accessible via the `count/{game}/{collection}` endpoint. */
                count?: number | ("dynamic" | "?");
                /** @description Whether this table is hidden from the API. Always false-y. Note that this may either be an actual `false` value, or the string `"false"`. */
                hidden?: boolean | "false";
                /** @description Unique name of the collection. */
                name?: string;
                /** @description A list of resolvable names for the collection. These can be passed to the `c:resolve` query parameter to insert additional fields into the returned payload. */
                resolve_list?: string[];
              })[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * ability
   * @description An ability triggered by a character or vehicle.
   *
   * Abilities in the API are more generic than the in-game abilities and also cover other mechanics such as scopes and consumables.
   *
   * The generic fields `paramX` and `stringX` are documented in the the corresponding `ability_type` entry."
   */
  get_ability: {
    parameters: {
      query?: {
        /** @description Unique ID of an ability. */
        ability_id?: string;
        /** @description Unique ID of an ability type. */
        ability_type_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            ability_list?: {
                /** @description Unique identifier of the ability. */
                ability_id?: string;
                /** @description Unique identifier of the ability's type. */
                ability_type_id?: string;
                /** @description Maximum cast range of the ability for targeted abilities, such as the Nano-Repair Kit (aka. repair gun). */
                distance_max?: string;
                /** @description Duration of the ability in milliseconds. */
                expire_msec?: string;
                /** @description Initial delay before the ability can be used for the first time in milliseconds. */
                first_use_delay_msec?: string;
                /** @description Whether the ability is toggled. */
                flag_toggle?: string;
                /** @description Reuse cooldown for toggled abilities (mostly cloaks) in milliseconds */
                next_use_delay_msec?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/ability_type` for details. */
                param1?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/ability_type` for details. */
                param10?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/ability_type` for details. */
                param11?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/ability_type` for details. */
                param12?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/ability_type` for details. */
                param13?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/ability_type` for details. */
                param14?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/ability_type` for details. */
                param2?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/ability_type` for details. */
                param3?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/ability_type` for details. */
                param4?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/ability_type` for details. */
                param5?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/ability_type` for details. */
                param6?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/ability_type` for details. */
                param7?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/ability_type` for details. */
                param8?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/ability_type` for details. */
                param9?: string;
                /** @description Effect radius of the ability, such as the Nano Regen Device (aka. AoE heal). */
                radius_max?: string;
                /** @description Cost per millisecond for keeping the ability active. */
                resource_cost_per_msec?: string;
                /** @description Initial cost for activating the ability. */
                resource_first_cost?: string;
                /** @description Unique identifier of the resource type consumed by the ability. */
                resource_type_id?: string;
                /** @description Ability cooldown in milliseconds. */
                reuse_delay_msec?: string;
                /** @description Generic string field. See the corresponding `ps2/ability_type` for details. */
                string1?: string;
                /** @description Generic string field. See the corresponding `ps2/ability_type` for details. */
                string2?: string;
                /** @description Generic string field. See the corresponding `ps2/ability_type` for details. */
                string3?: string;
                /** @description Generic string field. See the corresponding `ps2/ability_type` for details. */
                string4?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * ability_type
   * @description A type of ability.
   *
   * The generic fields `paramX` and `stringX` are documented here. Note that most of these generic fields are currently not used.
   */
  get_ability_type: {
    parameters: {
      query?: {
        /** @description Unique ID of an ability type. */
        ability_type_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            ability_type_list?: {
                /** @description Unique ID of the collection. */
                ability_type_id?: string;
                /** @description Description of the ability type. */
                description?: string;
                /** @description Documentation for this numeric parameter on abilities of this type. */
                param1?: string;
                /** @description Documentation for this numeric parameter on abilities of this type. */
                param10?: string;
                /** @description Documentation for this numeric parameter on abilities of this type. */
                param11?: string;
                /** @description Documentation for this numeric parameter on abilities of this type. */
                param12?: string;
                /** @description Documentation for this numeric parameter on abilities of this type. */
                param13?: string;
                /** @description Documentation for this numeric parameter on abilities of this type. */
                param14?: string;
                /** @description Documentation for this numeric parameter on abilities of this type. */
                param2?: string;
                /** @description Documentation for this numeric parameter on abilities of this type. */
                param3?: string;
                /** @description Documentation for this numeric parameter on abilities of this type. */
                param4?: string;
                /** @description Documentation for this numeric parameter on abilities of this type. */
                param5?: string;
                /** @description Documentation for this numeric parameter on abilities of this type. */
                param6?: string;
                /** @description Documentation for this numeric parameter on abilities of this type. */
                param7?: string;
                /** @description Documentation for this numeric parameter on abilities of this type. */
                param8?: string;
                /** @description Documentation for this numeric parameter on abilities of this type. */
                param9?: string;
                /** @description Documentation for this string parameter on abilities of this type. */
                string1?: string;
                /** @description Documentation for this string parameter on abilities of this type. */
                string2?: string;
                /** @description Documentation for this string parameter on abilities of this type. */
                string3?: string;
                /** @description Documentation for this string parameter on abilities of this type. */
                string4?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * achievement
   * @description Endpoint for weapon medals and service ribbons.
   *
   * There is no "achievement type" collection or field, but they can be grouped by the `repeatable` field, which is only true for service ribbons.
   */
  get_achievement: {
    parameters: {
      query?: {
        /** @description Unique ID of an achievement. */
        achievement_id?: string;
        /** @description Unique identifier of an item. */
        item_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            achievement_list?: {
                /** @description Unique ID of the collection. */
                achievement_id?: string;
                description?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
                /** @description ID of the image associated with this achievement. */
                image_id?: string;
                /** @description Path to the image associated with this achievement. */
                image_path?: string;
                /** @description ID of the image set associated with this achievement. */
                image_set_id?: string;
                /** @description ID of the item associated with this achievement. Can be used to associate weapons with their medals/ribbon. */
                item_id?: string;
                name?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
                /** @description ID of the objective group counting towards this achievement. */
                objective_group_id?: string;
                /** @description Whether this achievement can be gained more than once. True for ribbons, false for medals. */
                repeatable?: string;
                /** @description ID of the reward granted upon completion of this achievement. */
                reward_id?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * armor_facing
   * @description Enumerates the armor facing angles used for directional damage reduction on vehicles.
   */
  get_armor_facing: {
    parameters: {
      query?: {
        /** @description Unique ID of the armor facing direction. */
        armor_facing_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            armor_facing_list?: {
                /** @description Unique ID of the collection. */
                armor_facing_id?: string;
                /** @description Description of the armor facing direction. */
                description?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * armor_info
   * @description A set of armor values for each armor facing angle on a vehicle.
   */
  get_armor_info: {
    parameters: {
      query?: {
        /** @description Unique ID of the armor info entry. */
        armor_info_id?: string;
        /** @description Unique ID of the armor facing direction. */
        armor_facing_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            armor_info_list?: {
                /** @description Flat damage reduction applied to incoming damage. Only used in the tutorial to make target dummies invincible. */
                armor_amount?: string;
                /** @description ID of the armor facing direction. */
                armor_facing_id?: string;
                /** @description Unique ID of the collection. */
                armor_info_id?: string;
                /** @description Damage reduction in percent. Negative values increase damage taken. */
                armor_percent?: string;
                /** @description Description of the armor info entry. */
                description?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * character
   * @description Game-specific documentation for the `character` collection.
   *
   * This collection is randomly distributed across 20 different databases, causing some unusual behaviour when filtering. For example, the `c:distinct` parameter will fetch the distinct values for each database and aggregate them in the response, resulting in duplicate entries.
   *
   * In addition to the commonly-used parameters provided, this endpoint may be queried by any of its fields, including sub-keys like `times.creation`.
   */
  get_character: {
    parameters: {
      query?: {
        /** @description The `ps2/character` collection is distributed across 20 distinct databases. The per-DB limit may be more predictable in some use-cases. If set, `c:limit` will be ignored. For collections other than `ps2/character`, this parameter falls behaves exactly like `c:limit`. */
        "c:limitPerDB"?: number;
        /**
         * @description Unique identifier of a charcter. Note that character IDs are not guaranteed to be unique across games; the same ID may be assigned to different characters for `ps2` than for `ps2ps4us`.
         *
         * When converting this value to native representations, note that a 64 bit integer type is required to avoid truncation.
         */
        character_id?: string;
        /** @description Name of the character. Note that when looking up characters, it is preferable to query `name.first_lower` with a lowercase version of the search string. */
        "name.first"?: string;
        /** @description Lowercase version of `name.first`. When performing case-insensitive lookups, using this field is more performant than setting `c:case=false`. */
        "name.first_lower"?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            character_list?: {
                /** @description Sub-object providing battle rank information. */
                battle_rank?: {
                  /** @description Progress to the next level-up. */
                  percent_to_next?: string;
                  /** @description Current battle rank. Note that due to the A.S.P. prestige system, this is no longer sufficient to express player level. Always check `prestige_level` as well. */
                  value?: string;
                };
                /** @description Sub-object providing certification point information. */
                certs?: {
                  /** @description Current certification point balance. */
                  available_points?: string;
                  /** @description Certifications earned through experience gain. */
                  earned_points?: string;
                  /** @description Certifications gifted through in-game events or refunds. */
                  gifted_points?: string;
                  /** @description Progress to earning the next certification point (every 250 exp). */
                  percent_to_next?: string;
                  /** @description Certifications points spent on skills and implant bundles. */
                  spent_points?: string;
                };
                /** @description Unique ID of the collection. */
                character_id?: string;
                /** @description Sub-object for daily ribbon bonuses. Note that ribbon bonuses have been disabled, rendering this object useless. It is recommended to treat is as optional in client code in case it ever gets removed from the response object. */
                daily_ribbon?: {
                  /** @description Number of daily ribbon bonuses available for collection. */
                  count?: string;
                  /** @description Human-readable version of `time`. */
                  date?: string;
                  /** @description Next time a daily ribbon bonus will be granted. */
                  time?: string;
                };
                /** @description Faction of the character. For NSOs, this equals the value of NSOs. An NSOs currently or home faction is not exposed on the REST API, but can be determined via the `team_id` of some WebSocket payloads. */
                faction_id?: string;
                /** @description Identifier for the character's in-game model. Note that with gender change tokens, this is no longer guaranteed to be immutable across a character's career. */
                head_id?: string;
                /** @description Name of the character. Use the `first_lower` field for faster case-insensitive searches without needing to set `c:case=false`. */
                name?: {
                  first?: string;
                  first_lower?: string;
                };
                /** @description The A.S.P. rank of the character. */
                prestige_level?: string;
                /** @description Class of the character when the last logged off. This value can generally only be one of the 24 infantry classes available in the legacy `ps2/profile` collection, though other values are possible due to bad data or deleted characters. */
                profile_id?: string;
                /** @description Sub-object providing login time and playtime information. */
                times?: {
                  /** @description Character creation timestamp in UTC. */
                  creation?: string;
                  /** @description Human-readable version of `creation`. */
                  creation_date?: string;
                  /** @description Last time the character logged in. Together with `last_save`, this can be used to construct the duration of the last play session of the character. */
                  last_login?: string;
                  /** @description Human-readable version of `last_login`. */
                  last_login_date?: string;
                  /** @description Last time the character info was updated. This generally corresponds to the last time the character logged off. For this reason, characters are generally not available on the API during their first play session. */
                  last_save?: string;
                  /** @description Human-readable version of `last_save`. */
                  last_save_date?: string;
                  /** @description Number of individual logins by the character. */
                  login_count?: string;
                  /** @description Total playtime in minutes. */
                  minutes_played?: string;
                };
                /** @description Currently selected title of the character. Useful for playing long names of players, e.g. "Snowblower Higby". A title ID of `0` corresponds to a player having selected "No Title" in-game. */
                title_id?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * character_name
   * @description Optimized, low-bandwidth endpoint for character name resolution.
   */
  get_character_name: {
    parameters: {
      query?: {
        /**
         * @description Unique identifier of a charcter. Note that character IDs are not guaranteed to be unique across games; the same ID may be assigned to different characters for `ps2` than for `ps2ps4us`.
         *
         * When converting this value to native representations, note that a 64 bit integer type is required to avoid truncation.
         */
        character_id?: string;
        /** @description Name of the character. Note that when looking up characters, it is preferable to query `name.first_lower` with a lowercase version of the search string. */
        "name.first"?: string;
        /** @description Lowercase version of `name.first`. When performing case-insensitive lookups, using this field is more performant than setting `c:case=false`. */
        "name.first_lower"?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            character_name_list?: {
                /** @description Unique ID of the collection. */
                character_id?: string;
                /** @description Name of the character. Use the `first_lower` field for faster case-insensitive searches without needing to set `c:case=false`. */
                name?: {
                  first?: string;
                  first_lower?: string;
                };
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * characters_achievement
   * @description List the achievement progress for a character.
   */
  get_characters_achievement: {
    parameters: {
      query?: {
        /**
         * @description Unique identifier of a charcter. Note that character IDs are not guaranteed to be unique across games; the same ID may be assigned to different characters for `ps2` than for `ps2ps4us`.
         *
         * When converting this value to native representations, note that a 64 bit integer type is required to avoid truncation.
         */
        character_id?: string;
        /** @description Unique ID of an achievement. */
        achievement_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            characters_achievement_list?: {
                /** @description Unique ID of the achievement being returned. */
                achievement_id?: string;
                /** @description Character for which the achievement list is being returned. */
                character_id?: string;
                /** @description Number of times the achievement has been earned. Only exceeds 1 for ribbons. */
                earned_count?: string;
                /** @description UTC timestamp of when this achievement was completed. Remains at zero for repeatable achievements. */
                finish?: string;
                /** @description Human-readable version of `finish`. */
                finish_date?: string;
                /** @description UTC timestamp of when the underlying table was updated. */
                last_save?: string;
                /** @description Human-readable version of `last_save`. */
                last_save_date?: string;
                /** @description UTC timestamp of when progression towards this achievement started. For repeatable achievements, this marks the last time the achievement was gained. */
                start?: string;
                /** @description Human-readable version of `start`. */
                start_date?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * characters_currency
   * @description Lists the currencies owned by a character.
   *
   * Note that this table has been inconsistent since the introduction of the A.S.P. system: in addition to the currency value (Nanites), an extra `prestige_currency` key has been added, rather than being its own currency.
   */
  get_characters_currency: {
    parameters: {
      query?: {
        /**
         * @description Unique identifier of a charcter. Note that character IDs are not guaranteed to be unique across games; the same ID may be assigned to different characters for `ps2` than for `ps2ps4us`.
         *
         * When converting this value to native representations, note that a 64 bit integer type is required to avoid truncation.
         */
        character_id?: string;
        /** @description Unique ID of a currency. */
        currency_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            characters_currency_list?: ({
                /** @description Unique ID of the currency being returned. */
                currency_id?: string;
                /** @description Internal name of the currency being returned. */
                currency_name?: string;
                /** @description Number of A.S.P. tokens available to the character. */
                prestige_currency?: string;
                /** @description Amount of currency the character owns. */
                quantity?: string;
              } & {
                /** @description Character for which the currency list is being returned. */
                character_id?: string;
              })[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * characters_directive
   * @description Directive completion information for a character.
   *
   * Note that this also lists entries for incomplete directives; use the `completion_time` field to determine whether a directive has been completed.
   */
  get_characters_directive: {
    parameters: {
      query?: {
        /**
         * @description Unique identifier of a charcter. Note that character IDs are not guaranteed to be unique across games; the same ID may be assigned to different characters for `ps2` than for `ps2ps4us`.
         *
         * When converting this value to native representations, note that a 64 bit integer type is required to avoid truncation.
         */
        character_id?: string;
        /** @description Unique ID of a directive tree. */
        directive_tree_id?: string;
        /** @description Unique ID of a directive. */
        directive_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            characters_directive_list?: {
                /** @description Character for which the directive list is being returned. */
                character_id?: string;
                /** @description UTC timestamp of when the directive was completed. Zero if not completed. */
                completion_time?: string;
                /** @description Human-readable version of `completion_time`. */
                completion_time_date?: string;
                /** @description ID of the directive. */
                directive_id?: string;
                /** @description ID of the directive tree containing the directive. */
                directive_tree_id?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * characters_directive_objective
   * @description Current progress of a character within a directive.
   *
   * The current value of the directive progress can be found in the `state_data` field of this endpoint. The corresponding target value is found in the corresponding `objective`, usually in the `param1` field.
   */
  get_characters_directive_objective: {
    parameters: {
      query?: {
        /**
         * @description Unique identifier of a charcter. Note that character IDs are not guaranteed to be unique across games; the same ID may be assigned to different characters for `ps2` than for `ps2ps4us`.
         *
         * When converting this value to native representations, note that a 64 bit integer type is required to avoid truncation.
         */
        character_id?: string;
        /** @description Unique ID of a directive. */
        directive_id?: string;
        /** @description Unique identifier of an objective. */
        objective_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            characters_directive_objective_list?: {
                /** @description Character for which the directive objective status is being returned. */
                character_id?: string;
                /** @description ID of the directive for which objective status is returned. */
                directive_id?: string;
                /** @description ID of the objective group for which status is returned. */
                objective_group_id?: string;
                /** @description ID of the objective for which status is returned. */
                objective_id?: string;
                /** @description Progress of the character of the objective. This is the "current" value of the progress. The total can be found in the corresponding `objective`, usually under `param1`. */
                state_data?: string;
                /** @description Unknown. */
                status?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * characters_directive_tier
   * @description Directive tier completion information for a character.
   */
  get_characters_directive_tier: {
    parameters: {
      query?: {
        /**
         * @description Unique identifier of a charcter. Note that character IDs are not guaranteed to be unique across games; the same ID may be assigned to different characters for `ps2` than for `ps2ps4us`.
         *
         * When converting this value to native representations, note that a 64 bit integer type is required to avoid truncation.
         */
        character_id?: string;
        /** @description Unique ID of a directive tree. */
        directive_tree_id?: string;
        /** @description Unique ID of a directive tier. */
        directive_tier_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            characters_directive_tier_list?: {
                /** @description Character for which the directive tier list is being returned. */
                character_id?: string;
                /** @description UTC timestamp of when the directive tier was completed. Zero if not completed. */
                completion_time?: string;
                /** @description Human-readable version of `completion_time`. */
                completion_time_date?: string;
                /** @description ID of the directive tier. */
                directive_tier_id?: string;
                /** @description ID of the directive tree containing the directive. */
                directive_tree_id?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * characters_directive_tree
   * @description Directive tree completion information for a character.
   */
  get_characters_directive_tree: {
    parameters: {
      query?: {
        /**
         * @description Unique identifier of a charcter. Note that character IDs are not guaranteed to be unique across games; the same ID may be assigned to different characters for `ps2` than for `ps2ps4us`.
         *
         * When converting this value to native representations, note that a 64 bit integer type is required to avoid truncation.
         */
        character_id?: string;
        /** @description Unique ID of a directive tree. */
        directive_tree_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            characters_directive_tree_list?: {
                /** @description Character for which the directive tree list is being returned. */
                character_id?: string;
                /** @description UTC timestamp of when the directive tree was completed. Zero if not completed. */
                completion_time?: string;
                /** @description Human-readable version of `completion_time`. */
                completion_time_date?: string;
                /** @description Unique ID of the directive tier the character is currently on. */
                current_directive_tier_id?: string;
                /** @description Defunct field. Always returns zero. */
                current_level?: string;
                /** @description ID of the directive tree. */
                directive_tree_id?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * characters_event
   * @description ReST endpoint for retrieving historical character event data.
   *
   * Like `event`, but allows querying by character. The `character_id` and `id` fields are interchangeable.
   */
  get_characters_event: {
    parameters: {
      query?: {
        /**
         * @description Unique identifier of a charcter. Note that character IDs are not guaranteed to be unique across games; the same ID may be assigned to different characters for `ps2` than for `ps2ps4us`.
         *
         * When converting this value to native representations, note that a 64 bit integer type is required to avoid truncation.
         */
        character_id?: string;
        /** @description Alias for `character_id`. */
        id?: string;
        /** @description Type of event to retrieve. */
        type?: "BATTLE_RANK" | "ITEM" | "ACHIEVEMENT" | "DEATH" | "KILL" | "VEHICLE_DESTROY" | "FACILITY_CHARACTER";
        /** @description Only return results older than the given UTC timestamp. */
        before?: string;
        /** @description Only return results newer than the given UTC timestamp. */
        after?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            characters_event_list?: (({
                /** @description The ID of the character that ranked up. */
                character_id?: string;
                /** @description Internal name of the table. */
                table_type?: string;
                /** @description UTC timestamp of the event. */
                timestamp?: string;
                /** @description The ID of the world where the character ranked up. */
                world_id?: string;
                /** @description The ID of the zone where the character ranked up. */
                zone_id?: string;
              } & {
                /** @description The new battle rank of the character. */
                battle_rank?: string;
                /** @description Type of event. This generally matches the event types used by the ESS. */
                event_type?: string;
              }) | ({
                /** @description The ID of the character that ranked up. */
                character_id?: string;
                /** @description Internal name of the table. */
                table_type?: string;
                /** @description UTC timestamp of the event. */
                timestamp?: string;
                /** @description The ID of the world where the character ranked up. */
                world_id?: string;
                /** @description The ID of the zone where the character ranked up. */
                zone_id?: string;
              } & {
                /** @description Identifier string for the conext in which the item was granted. */
                context?: string;
                /** @description Type of event. This generally matches the event types used by the ESS. */
                event_type?: string;
                /** @description The number of items that were added. */
                item_count?: string;
                /** @description The ID of the item that was added. */
                item_id?: string;
              }) | ({
                /** @description The ID of the character that ranked up. */
                character_id?: string;
                /** @description Internal name of the table. */
                table_type?: string;
                /** @description UTC timestamp of the event. */
                timestamp?: string;
                /** @description The ID of the world where the character ranked up. */
                world_id?: string;
                /** @description The ID of the zone where the character ranked up. */
                zone_id?: string;
              } & {
                /** @description The ID of the achievement that was granted. */
                achievement_id?: string;
                /** @description Type of event. This generally matches the event types used by the ESS. */
                event_type?: string;
              }) | ({
                /** @description The ID of the character that ranked up. */
                character_id?: string;
                /** @description Internal name of the table. */
                table_type?: string;
                /** @description UTC timestamp of the event. */
                timestamp?: string;
                /** @description The ID of the world where the character ranked up. */
                world_id?: string;
                /** @description The ID of the zone where the character ranked up. */
                zone_id?: string;
              } & {
                /** @description The ID of the character that performed the kill. */
                attacker_character_id?: string;
                /** @description The ID of the fire mode that was used to perform the kill. */
                attacker_fire_mode_id?: string;
                /** @description The ID of the vehicle that the attacker was in when they performed the kill. */
                attacker_vehicle_id?: string;
                /** @description The ID of the item that was used to perform the kill. Note that this is an item ID and not the weapon ID, despite the name. */
                attacker_weapon_id?: string;
                /** @description The ID of the loadout that the dying player was playing as. */
                character_loadout_id?: string;
                /** @description Whether or not the kill was a critical hit. Not currently used by PlanetSide 2. */
                is_critical?: string;
                /** @description Whether or not the kill was a headshot. */
                is_headshot?: string;
              }) | ({
                /** @description The ID of the character that ranked up. */
                character_id?: string;
                /** @description Internal name of the table. */
                table_type?: string;
                /** @description UTC timestamp of the event. */
                timestamp?: string;
                /** @description The ID of the world where the character ranked up. */
                world_id?: string;
                /** @description The ID of the zone where the character ranked up. */
                zone_id?: string;
              } & {
                /** @description Unique ID of the player that destroyed the vehicle. */
                attacker_character_id?: string;
                /** @description The ID of the loadout that the attacker was playing as. */
                attacker_loadout_id?: string;
                /** @description Unknown. Generally identical to `attacker_character_id`. */
                attacker_player_guid?: string;
                /** @description The ID of the vehicle that the attacker was in when they destroyed the vehicle. */
                attacker_vehicle_id?: string;
                /** @description The ID of the item that was used to destroy the vehicle. Note that this is an item ID and not the weapon ID, despite the name. */
                attacker_weapon_id?: string;
                /** @description Type of event. This generally matches the event types used by the ESS. */
                event_type?: string;
                /** @description The ID of the faction that the vehicle belonged to. */
                faction_id?: string;
                /** @description Unknown. The IDs provided in this field are not available on the `projectile` endpoint. */
                projectile_id?: string;
                /** @description The ID of the vehicle that was destroyed. */
                vehicle_definition_id?: string;
              }) | ({
                /** @description The ID of the character that ranked up. */
                character_id?: string;
                /** @description Internal name of the table. */
                table_type?: string;
                /** @description UTC timestamp of the event. */
                timestamp?: string;
                /** @description The ID of the world where the character ranked up. */
                world_id?: string;
                /** @description The ID of the zone where the character ranked up. */
                zone_id?: string;
              } & {
                /** @description Type of event. This generally matches the event types used by the ESS. */
                event_type?: string;
                /** @description The ID of the facility that was captured. */
                facility_id?: string;
                /** @description The ID of the outfit that captured the facility, or the facility that owns the facility at the time of defence. */
                outfit_id?: string;
              }))[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * characters_event_grouped
   * @description Return character vs. character statistics.
   *
   * Allows calculating player vs. player KDR.
   */
  get_characters_event_grouped: {
    parameters: {
      query?: {
        /**
         * @description Unique identifier of a charcter. Note that character IDs are not guaranteed to be unique across games; the same ID may be assigned to different characters for `ps2` than for `ps2ps4us`.
         *
         * When converting this value to native representations, note that a 64 bit integer type is required to avoid truncation.
         */
        character_id?: string;
        /** @description Type of event to retrieve. */
        type?: "DEATH" | "KILL";
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            characters_event_grouped_list?: ({
                /** @description Other character for which the event list is being returned. */
                character_id?: string;
                /** @description Number of matching events. */
                count?: string;
                /**
                 * @description Type of event being returned.
                 * @enum {string}
                 */
                table_type?: "KILL" | "DEATH";
              })[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * characters_friend
   * @description Query the friends list of a character.
   */
  get_characters_friend: {
    parameters: {
      query?: {
        /**
         * @description Unique identifier of a charcter. Note that character IDs are not guaranteed to be unique across games; the same ID may be assigned to different characters for `ps2` than for `ps2ps4us`.
         *
         * When converting this value to native representations, note that a 64 bit integer type is required to avoid truncation.
         */
        character_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            characters_friend_list?: {
                /** @description Character for which the friends list is being returned. */
                character_id?: string;
                friend_list?: {
                    /** @description Character ID of the friend. */
                    character_id?: string;
                    /** @description Last time the friend logged in. */
                    last_login_time?: string;
                    /** @description Whether the friend is currently online. Offline players will return 0, otherwise the value will be the `world_id` of the `ps2/world` they are online on. */
                    online?: string;
                  }[];
                /** @description Defunct. Always returns `null`. */
                name?: null;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * characters_item
   * @description Query the items of a character. Note that this collection no longer lists account-wide item unlocks as this served as a fingerprint to identify players across multiple characters.
   */
  get_characters_item: {
    parameters: {
      query?: {
        /**
         * @description Unique identifier of a charcter. Note that character IDs are not guaranteed to be unique across games; the same ID may be assigned to different characters for `ps2` than for `ps2ps4us`.
         *
         * When converting this value to native representations, note that a 64 bit integer type is required to avoid truncation.
         */
        character_id?: string;
        /** @description Unique identifier of an item. */
        item_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            characters_item_list?: ({
                /** @description Item side of the relationship. */
                item_id?: string;
              } & {
                /** @description Character side of the relationship. */
                character_id?: string;
              })[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * characters_leaderboard
   * @description Query the leaderboard for a character. Note that only the top 10'000 players for a given statistic are tracked in the leaderboard; many characters will not have an entry in this collection.
   *
   * The `limit` key inserted into the response indicates the number of requested entries when passing multiple character IDs. Comparison with `returned` may be used to determine whether any characters were skipped due to not being in the leaderboard.
   */
  get_characters_leaderboard: {
    parameters: {
      query: {
        /** @description Unique identifier of a character for which to fetch leaderboard data. */
        character_id: string;
        /** @description Name of a statistic for leaderboards. */
        name: "Kills" | "Score" | "Time" | "Deaths";
        /** @description Time period for a leadboard. */
        period: "Forever" | "Monthly" | "Weekly" | "Daily" | "OneLife";
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            characters_leaderboard_list?: {
                /** @description The ID of the character. */
                character_id?: string;
                /** @description The rank of the character for the given statistic. */
                rank?: string;
                /** @description The all-time value of the given statistic. */
                value?: string;
              }[];
            count?: number;
            key?: string;
            limit?: number;
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * characters_online_status
   * @description Query the online status of a character.
   */
  get_characters_online_status: {
    parameters: {
      query?: {
        /**
         * @description Unique identifier of a charcter. Note that character IDs are not guaranteed to be unique across games; the same ID may be assigned to different characters for `ps2` than for `ps2ps4us`.
         *
         * When converting this value to native representations, note that a 64 bit integer type is required to avoid truncation.
         */
        character_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            characters_online_status_list?: {
                /** @description Character for which the online status is being returned. */
                character_id?: string;
                /** @description Whether the character is currently online. Offline players will return 0, otherwise the value will be the `world_id` of the `ps2/world` they are online on. */
                online_status?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * characters_skill
   * @description List the skills unlocked by a character.
   */
  get_characters_skill: {
    parameters: {
      query?: {
        /**
         * @description Unique identifier of a charcter. Note that character IDs are not guaranteed to be unique across games; the same ID may be assigned to different characters for `ps2` than for `ps2ps4us`.
         *
         * When converting this value to native representations, note that a 64 bit integer type is required to avoid truncation.
         */
        character_id?: string;
        /** @description Unique identifier of a skill. */
        skill_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            characters_skill_list?: {
                /** @description Character side of the relationship. */
                character_id?: string;
                /** @description UTC timestamp of when the underlying table was updated. */
                last_save?: string;
                /** @description Human-readable version of `last_save`. */
                last_save_date?: string;
                /** @description Skill side of the relationship. */
                skill_id?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * characters_stat
   * @description Basic statistics endpoint for character-wide and class-specific
   * statistics.
   *
   * - `stat_name` lists the name of the stat
   * - `profile` represents the class, with a value of 0 denoting a character-wide value
   */
  get_characters_stat: {
    parameters: {
      query?: {
        /**
         * @description Unique identifier of a charcter. Note that character IDs are not guaranteed to be unique across games; the same ID may be assigned to different characters for `ps2` than for `ps2ps4us`.
         *
         * When converting this value to native representations, note that a 64 bit integer type is required to avoid truncation.
         */
        character_id?: string;
        /** @description Name of a statistic for the `characters_stat` collection. */
        stat_name?: "achievement_count" | "assist_count" | "deaths" | "facility_defended_count" | "fire_count" | "hit_count" | "medal_count" | "play_time" | "score" | "skill_points" | "weapon_deaths" | "weapon_fire_count" | "weapon_hit_count" | "weapon_play_time" | "weapon_score";
        /** @description Subset of identifiers from the `profile_id` collection. The values map onto the NC loadout IDs regardless of faction. 0: All time, 1: Infiltrator, 3: Light Assault, 4: Combat Medic, 5: Engineer, 6: MAX Unit. */
        profile_id?: "0" | "1" | "3" | "4" | "5" | "6" | "7";
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            characters_stat_list?: ({
                /** @description Last time the stat was saved. */
                last_save?: string;
                /** @description Human-readable version of `last_save`. */
                last_save_date?: string;
                /** @description Class for which stats are being returne. */
                profile_id?: string;
                /** @description Name of the stat being returned. */
                stat_name?: string;
                /** @description Value of the stat for the last 24 hours. */
                value_daily?: string;
                /** @description All-time value of the stat. */
                value_forever?: string;
                /** @description Value of the stat for the last 30 days. */
                value_monthly?: string;
                /** @description Highest value of the stat in a single life. */
                value_one_life_max?: string;
                /** @description Value of the stat for the last 7 days. */
                value_weekly?: string;
              } & {
                /** @description Character for which the stats are being returned. */
                character_id?: string;
              })[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * characters_stat_by_faction
   * @description Faction-specific statistics endpoint. Useful for determining faction bias or kill spread.
   *
   * - `stat_name` lists the name of the stat
   * - `profile` represents the class, with a value of 0 denoting a character-wide value
   *
   * All `value_*` fields are provided per-faction. Note that the value for the own faction is
   * often blanked: `value_nc` of the stat `kills` cannot be used to enumerate an NC character's
   * team kills, for example.
   */
  get_characters_stat_by_faction: {
    parameters: {
      query?: {
        /**
         * @description Unique identifier of a charcter. Note that character IDs are not guaranteed to be unique across games; the same ID may be assigned to different characters for `ps2` than for `ps2ps4us`.
         *
         * When converting this value to native representations, note that a 64 bit integer type is required to avoid truncation.
         */
        character_id?: string;
        /** @description Name of a statistic for the `characters_stat_by_faction` collection. */
        stat_name?: "domination_count" | "facility_capture_count" | "killed_by" | "kills" | "revenge_count" | "weapon_damage_given" | "weapon_damage_taken_by" | "weapon_headshots" | "weapon_killed_by" | "weapon_kills" | "weapon_vehicle_kills";
        /** @description Subset of identifiers from the `profile_id` collection. The values map onto the NC loadout IDs regardless of faction. 0: All time, 1: Infiltrator, 3: Light Assault, 4: Combat Medic, 5: Engineer, 6: MAX Unit. */
        profile_id?: "0" | "1" | "3" | "4" | "5" | "6" | "7";
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            characters_stat_by_faction_list?: ({
                /** @description Last time the stat was saved. */
                last_save?: string;
                /** @description Human-readable version of `last_save`. */
                last_save_date?: string;
                /** @description Class for which stats are being returne. */
                profile_id?: string;
                /** @description Name of the stat being returned. */
                stat_name?: string;
                /** @description Value of the stat for the last 24 hours (NC). */
                value_daily_nc?: string;
                /** @description Value of the stat for the last 24 hours (TR). */
                value_daily_tr?: string;
                /** @description Value of the stat for the last 24 hours (VS). */
                value_daily_vs?: string;
                /** @description All-time value of the stat (NC). */
                value_forever_nc?: string;
                /** @description All-time value of the stat (TR). */
                value_forever_tr?: string;
                /** @description All-time value of the stat (VS). */
                value_forever_vs?: string;
                /** @description Value of the stat for the last 30 days (NC). */
                value_monthly_nc?: string;
                /** @description Value of the stat for the last 30 days (TR). */
                value_monthly_tr?: string;
                /** @description Value of the stat for the last 30 days (VS). */
                value_monthly_vs?: string;
                /** @description Highest value of the stat in a single life (NC). */
                value_one_life_max_nc?: string;
                /** @description Highest value of the stat in a single life (TR). */
                value_one_life_max_tr?: string;
                /** @description Highest value of the stat in a single life (VS). */
                value_one_life_max_vs?: string;
                /** @description Value of the stat for the last 7 days (NC). */
                value_weekly_nc?: string;
                /** @description Value of the stat for the last 7 days (TR). */
                value_weekly_tr?: string;
                /** @description Value of the stat for the last 7 days (VS). */
                value_weekly_vs?: string;
              } & {
                /** @description Character for which the stats are being returned. */
                character_id?: string;
              })[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * characters_stat_history
   * @description Statistics endpoint for historical character stats. In addition to the `all_time` and
   * `one_life_max` keys, values are also provided for the last 31 days (`day`), 12 months
   * (`month`), or 13 weeks (`week`).
   *
   * - `stat_name` lists the name of the stat
   * - `profile` represents the class, with a value of 0 denoting a character-wide value
   */
  get_characters_stat_history: {
    parameters: {
      query?: {
        /**
         * @description Unique identifier of a charcter. Note that character IDs are not guaranteed to be unique across games; the same ID may be assigned to different characters for `ps2` than for `ps2ps4us`.
         *
         * When converting this value to native representations, note that a 64 bit integer type is required to avoid truncation.
         */
        character_id?: string;
        /** @description Name of a statistic for the `characters_stat_history` collection. */
        stat_name?: "battle_rank" | "certs" | "deaths" | "facility_capture" | "facility_defend" | "kills" | "medals" | "ribbons" | "score" | "time";
        /** @description Subset of identifiers from the `profile_id` collection. The values map onto the NC loadout IDs regardless of faction. 0: All time, 1: Infiltrator, 3: Light Assault, 4: Combat Medic, 5: Engineer, 6: MAX Unit. */
        profile_id?: "0" | "1" | "3" | "4" | "5" | "6" | "7";
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            characters_stat_history_list?: ({
                /** @description Last time the stat was saved. */
                last_save?: string;
                /** @description Human-readable version of `last_save`. */
                last_save_date?: string;
                /** @description Class for which stats are being returne. */
                profile_id?: string;
                /** @description Name of the stat being returned. */
                stat_name?: string;
                /** @description Value of the stat for the last 24 hours. */
                value_daily?: string;
                /** @description All-time value of the stat. */
                value_forever?: string;
                /** @description Value of the stat for the last 30 days. */
                value_monthly?: string;
                /** @description Highest value of the stat in a single life. */
                value_one_life_max?: string;
                /** @description Value of the stat for the last 7 days. */
                value_weekly?: string;
              } & {
                /** @description Character for which the stats are being returned. */
                character_id?: string;
                /** @description Name of the stat being returned. */
                stat_name?: string;
              })[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * characters_weapon_stat
   * @description Weapon statistics endpoint containing generic values such as playtime or score while
   * wielding. The most common use is calculating the accuracy of a player with a given weapon
   * by dividing `weapon_hit_count` by `weapon_fire_count`.
   *
   * - `stat_name` lists the name of the stat
   * - `item_id` identifies the item for the weapon. Note that this value can be zero, in that
   *   case it serves as a catch-all for all weapons for the given `vehicle_id`.
   * - `vehicle_id` the vehicle on which the weapon is available.
   */
  get_characters_weapon_stat: {
    parameters: {
      query?: {
        /**
         * @description Unique identifier of a charcter. Note that character IDs are not guaranteed to be unique across games; the same ID may be assigned to different characters for `ps2` than for `ps2ps4us`.
         *
         * When converting this value to native representations, note that a 64 bit integer type is required to avoid truncation.
         */
        character_id?: string;
        /** @description Name of a statistic for the `characters_weapon_stat` collection. */
        stat_name?: "weapon_deaths" | "weapon_fire_count" | "weapon_hit_count" | "weapon_play_time" | "weapon_score";
        /** @description Unique identifier of an item. */
        item_id?: string;
        /** @description Unique identifier of a vehicle. */
        vehicle_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            characters_weapon_stat_list?: ({
                /** @description The ID of the item. */
                item_id?: string;
                /** @description Last time the stat was saved. */
                last_save?: string;
                /** @description Human-readable version of `last_save`. */
                last_save_date?: string;
                /** @description The name of the stat being recorded. */
                stat_name?: string;
                /** @description The all-time value of the given stat. */
                value?: string;
                /** @description The ID of the vehicle. */
                vehicle_id?: string;
              } & {
                /** @description The ID of the character. */
                character_id?: string;
              })[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * characters_weapon_stat_by_faction
   * @description Faction-specific weapon statistics endpoint containing combat-focussed stats such as kills,
   * deaths, headshots and damage dealt/taken.
   *
   * - `stat_name` lists the name of the stat
   * - `item_id` identifies the item for the weapon. Note that this value can be zero, in that
   *   case it serves as a catch-all for all weapons for the given `vehicle_id`.
   * - `vehicle_id` the vehicle on which the weapon is available.
   */
  get_characters_weapon_stat_by_faction: {
    parameters: {
      query?: {
        /**
         * @description Unique identifier of a charcter. Note that character IDs are not guaranteed to be unique across games; the same ID may be assigned to different characters for `ps2` than for `ps2ps4us`.
         *
         * When converting this value to native representations, note that a 64 bit integer type is required to avoid truncation.
         */
        character_id?: string;
        /** @description Name of a statistic for the `characters_weapon_stat_by_faction` collection. */
        stat_name?: "weapon_damage_given" | "weapon_damage_taken_by" | "weapon_headshots" | "weapon_killed_by" | "weapon_kills" | "weapon_vehicle_kills";
        /** @description Unique identifier of an item. */
        item_id?: string;
        /** @description Unique identifier of a vehicle. */
        vehicle_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            characters_weapon_stat_by_faction_list?: ({
                /** @description The ID of the item. */
                item_id?: string;
                /** @description Last time the stat was saved. */
                last_save?: string;
                /** @description Human-readable version of `last_save`. */
                last_save_date?: string;
                /** @description The name of the stat being recorded. */
                stat_name?: string;
                /** @description The all-time value of the given stat for the NC faction. */
                value_nc?: string;
                /** @description The all-time value of the given stat for the TR faction. */
                value_tr?: string;
                /** @description The all-time value of the given stat for the VS faction. */
                value_vs?: string;
                /** @description The ID of the vehicle. */
                vehicle_id?: string;
              } & {
                /** @description The ID of the character. */
                character_id?: string;
              })[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * characters_world
   * @description Query the server a character is on.
   */
  get_characters_world: {
    parameters: {
      query?: {
        /**
         * @description Unique identifier of a charcter. Note that character IDs are not guaranteed to be unique across games; the same ID may be assigned to different characters for `ps2` than for `ps2ps4us`.
         *
         * When converting this value to native representations, note that a 64 bit integer type is required to avoid truncation.
         */
        character_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            characters_world_list?: {
                /** @description Character for which the world is being returned. */
                character_id?: string;
                /** @description The `ps2/world` of the character. */
                world_id?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * currency
   * @description Lists currencies available in the game.
   *
   * As of 2023-06-13, the only currency available are Nanites. Outfit resources and other currencies such as Daybreak Cash, ISO-4, or A7 are not available on the API, while Cert Points and A.S.P. tokens are stored in the `character` collection.
   */
  get_currency: {
    parameters: {
      query?: {
        /** @description Unique ID of a currency. */
        currency_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            currency_list?: {
                /** @description Unique ID of the currency. */
                currency_id?: string;
                /** @description Icon ID of the resource. This is actually an `image_set_id`. */
                icon_id?: string;
                /** @description The maximum amount of this currency that can be held in a character's inventory. */
                inventory_cap?: string;
                name?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * directive
   * @description An individual directive that may be completed by a player.
   *
   * This collection lists an individual directive, such as "100 Roadkills".
   */
  get_directive: {
    parameters: {
      query?: {
        /** @description Unique ID of a directive. */
        directive_id?: string;
        /** @description Unique ID of a directive tree. */
        directive_tree_id?: string;
        /** @description Unique ID of a directive tier. */
        directive_tier_id?: string;
        /** @description Unique identifier of an objective set. */
        objective_set_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            directive_list?: {
                description?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
                /** @description Unique ID of the directive. */
                directive_id?: string;
                /** @description Unique ID of the directive tier. */
                directive_tier_id?: string;
                /** @description Unique ID of the directive tree. */
                directive_tree_id?: string;
                /** @description Unique ID of the defaultimage. */
                image_id?: string;
                /** @description Path to the default image. */
                image_path?: string;
                /** @description Unique ID of the image set for this directive. */
                image_set_id?: string;
                name?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
                /** @description Unique ID of the objective set. */
                objective_set_id?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * directive_tier
   * @description A completion tier within a directive tree.
   *
   * This covers the individual stages of directive tiers, such as "Combat Medic: Adept".
   */
  get_directive_tier: {
    parameters: {
      query?: {
        /** @description Unique ID of a directive tree. */
        directive_tree_id?: string;
        /** @description Unique ID of a directive tier. */
        directive_tier_id?: string;
        /** @description Unique identifier of a reward set. */
        reward_set_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            directive_tier_list?: {
                /** @description The number of directives within this tier that must be completed to complete it. */
                completion_count?: string;
                /** @description The amount of directive points awarded for completing this directive tier. */
                directive_points?: string;
                /** @description Unique ID of the directive tier. */
                directive_tier_id?: string;
                /** @description Unique ID of the directive tree this tier belongs to. */
                directive_tree_id?: string;
                /** @description Unique ID of the default image. */
                image_id?: string;
                /** @description Path to the default image. */
                image_path?: string;
                /** @description Unique ID of the image set for this directive tier. */
                image_set_id?: string;
                name?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
                /** @description Unique ID of the reward set awarded for completing this directive tier. */
                reward_set_id?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * directive_tree
   * @description A tree of directives sorted into multiple tiers.
   *
   * This collection represents the individual paths within a directive category, such as "Light Assault" or "Combat Medic".
   */
  get_directive_tree: {
    parameters: {
      query?: {
        /** @description Unique ID of a directive tree. */
        directive_tree_id?: string;
        /** @description Unique ID of a directive tree category. */
        directive_tree_category_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            directive_tree_list?: {
                description?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
                /** @description Unique ID of the category of the directive tree. */
                directive_tree_category_id?: string;
                /** @description Unique ID of the directive tree. */
                directive_tree_id?: string;
                /** @description Unique ID of the default image. */
                image_id?: string;
                /** @description Path to the default image. */
                image_path?: string;
                /** @description Unique ID of the image set for this directive tree. */
                image_set_id?: string;
                name?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * directive_tree_category
   * @description Top-level categorisation of directive trees.
   *
   * This covers the main sections in the Directive menu, such as "Infantry", "Vehicles", or "Events".
   */
  get_directive_tree_category: {
    parameters: {
      query?: {
        /** @description Unique ID of a directive tree category. */
        directive_tree_category_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            directive_tree_category_list?: {
                /** @description Unique ID of the directive tree category. */
                directive_tree_category_id?: string;
                name?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * effect
   * @description A weapon-based effect acting on players or vehicles.
   *
   * Weapon-based effects include direct and indirect damage effects, tactical grenade impacts, as well as pseudo-weapons such as the Medic tool or Engineer repair tool. For world-based effects, weapon attachments and buffs, see the `zone_effect` collection instead.
   *
   * See the `effect_type` collection for a list of available effect types.
   */
  get_effect: {
    parameters: {
      query?: {
        /** @description Unique ID of the effect. */
        effect_id?: string;
        /** @description Unique ID of the effect type. */
        effect_type_id?: string;
        /** @description Unique ID of an ability. */
        ability_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            effect_list?: {
                /** @description Unique identifier of the ability associated with this effect. */
                ability_id?: string;
                /** @description Unique identifier of the ability type associated with this effect. */
                ability_type_id?: string;
                /** @description Duration over which the effect is applied, in seconds. */
                duration_seconds?: string;
                /** @description Unique ID of the collection. */
                effect_id?: string;
                /** @description Unique identifier of the effect's type. */
                effect_type_id?: string;
                /** @description Unkown. Appears to control the resource drain of toggled abilities (e.g. Heavy Overshield) while they are active, among other things. */
                is_drain?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/effect_type` for details. */
                param1?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/effect_type` for details. */
                param10?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/effect_type` for details. */
                param11?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/effect_type` for details. */
                param12?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/effect_type` for details. */
                param13?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/effect_type` for details. */
                param2?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/effect_type` for details. */
                param3?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/effect_type` for details. */
                param4?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/effect_type` for details. */
                param5?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/effect_type` for details. */
                param6?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/effect_type` for details. */
                param7?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/effect_type` for details. */
                param8?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/effect_type` for details. */
                param9?: string;
                /** @description Resist type used to calculate damage resistance for this effect. */
                resist_type_id?: string;
                /** @description Target type used to select targets for this effect. */
                target_type_id?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * effect_type
   * @description A type of effect.
   *
   * The generic fields `paramX` and `stringX` are documented here. Note that not all fields are used by all effect types, or at all.
   */
  get_effect_type: {
    parameters: {
      query?: {
        /** @description Unique ID of the effect type. */
        effect_type_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            effect_type_list?: {
                /** @description Description of the effect type. */
                description?: string;
                /** @description Unique ID of the collection. */
                effect_type_id?: string;
                /** @description Documentation for this numeric parameter on effects of this type. */
                param1?: string;
                /** @description Documentation for this numeric parameter on effects of this type. */
                param10?: string;
                /** @description Documentation for this numeric parameter on effects of this type. */
                param11?: string;
                /** @description Documentation for this numeric parameter on effects of this type. */
                param12?: string;
                /** @description Documentation for this numeric parameter on effects of this type. */
                param13?: string;
                /** @description Documentation for this numeric parameter on effects of this type. */
                param2?: string;
                /** @description Documentation for this numeric parameter on effects of this type. */
                param3?: string;
                /** @description Documentation for this numeric parameter on effects of this type. */
                param4?: string;
                /** @description Documentation for this numeric parameter on effects of this type. */
                param5?: string;
                /** @description Documentation for this numeric parameter on effects of this type. */
                param6?: string;
                /** @description Documentation for this numeric parameter on effects of this type. */
                param7?: string;
                /** @description Documentation for this numeric parameter on effects of this type. */
                param8?: string;
                /** @description Documentation for this numeric parameter on effects of this type. */
                param9?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * empire_scores (Defunct)
   * @description Defunct endpoint for the "World Domination Series" event scores.
   */
  get_empire_scores: {
    parameters: {
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            empire_scores_list?: {
                /** @description Human-readable version of `end_time`. */
                end_date?: string;
                /** @description UTC timestamp of when the event ended. */
                end_time?: string;
                name?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
                /** @description Human-readable version of `start_time`. */
                start_date?: string;
                /** @description UTC timestamp of when the event started. */
                start_time?: string;
                /** @description Description of the tracker. */
                tracker_description?: string;
                /** @description Unique name of the tracker. */
                tracker_name?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * event
   * @description ReST endpoint for retrieving historical event data.
   *
   * These largely mirror the corresponding events in the ESS:
   *
   * - `ItemAdded` -> `ITEM`
   * - `Death` -> `KILL`/`DEATH`
   * - `BattleRankUp` -> `BATTLE_RANK`
   * - `PlayerFacilityCapture`/`PlayerFacilityDefend` -> `FACILITY_CHARACTER`
   * - `AchievementEarned` -> `ACHIEVEMENT`
   * - `FacilityControl` -> `FACILITYCONTROL`
   * - `MetagameEvent` -> `METAGAME`"
   */
  get_event: {
    parameters: {
      query?: {
        /** @description Type of event to retrieve. */
        type?: "BATTLE_RANK" | "ITEM" | "ACHIEVEMENT" | "DEATH" | "KILL" | "VEHICLE_DESTROY" | "FACILITY_CHARACTER" | "FACILITYCONTROL" | "METAGAME";
        /** @description Only return results older than the given UTC timestamp. */
        before?: string;
        /** @description Only return results newer than the given UTC timestamp. */
        after?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            event_list?: ((({
                /** @description The ID of the character that ranked up. */
                character_id?: string;
                /** @description Internal name of the table. */
                table_type?: string;
                /** @description UTC timestamp of the event. */
                timestamp?: string;
                /** @description The ID of the world where the character ranked up. */
                world_id?: string;
                /** @description The ID of the zone where the character ranked up. */
                zone_id?: string;
              } & {
                /** @description The new battle rank of the character. */
                battle_rank?: string;
                /** @description Type of event. This generally matches the event types used by the ESS. */
                event_type?: string;
              }) | ({
                /** @description The ID of the character that ranked up. */
                character_id?: string;
                /** @description Internal name of the table. */
                table_type?: string;
                /** @description UTC timestamp of the event. */
                timestamp?: string;
                /** @description The ID of the world where the character ranked up. */
                world_id?: string;
                /** @description The ID of the zone where the character ranked up. */
                zone_id?: string;
              } & {
                /** @description Identifier string for the conext in which the item was granted. */
                context?: string;
                /** @description Type of event. This generally matches the event types used by the ESS. */
                event_type?: string;
                /** @description The number of items that were added. */
                item_count?: string;
                /** @description The ID of the item that was added. */
                item_id?: string;
              }) | ({
                /** @description The ID of the character that ranked up. */
                character_id?: string;
                /** @description Internal name of the table. */
                table_type?: string;
                /** @description UTC timestamp of the event. */
                timestamp?: string;
                /** @description The ID of the world where the character ranked up. */
                world_id?: string;
                /** @description The ID of the zone where the character ranked up. */
                zone_id?: string;
              } & {
                /** @description The ID of the achievement that was granted. */
                achievement_id?: string;
                /** @description Type of event. This generally matches the event types used by the ESS. */
                event_type?: string;
              }) | ({
                /** @description The ID of the character that ranked up. */
                character_id?: string;
                /** @description Internal name of the table. */
                table_type?: string;
                /** @description UTC timestamp of the event. */
                timestamp?: string;
                /** @description The ID of the world where the character ranked up. */
                world_id?: string;
                /** @description The ID of the zone where the character ranked up. */
                zone_id?: string;
              } & {
                /** @description The ID of the character that performed the kill. */
                attacker_character_id?: string;
                /** @description The ID of the fire mode that was used to perform the kill. */
                attacker_fire_mode_id?: string;
                /** @description The ID of the vehicle that the attacker was in when they performed the kill. */
                attacker_vehicle_id?: string;
                /** @description The ID of the item that was used to perform the kill. Note that this is an item ID and not the weapon ID, despite the name. */
                attacker_weapon_id?: string;
                /** @description The ID of the loadout that the dying player was playing as. */
                character_loadout_id?: string;
                /** @description Whether or not the kill was a critical hit. Not currently used by PlanetSide 2. */
                is_critical?: string;
                /** @description Whether or not the kill was a headshot. */
                is_headshot?: string;
              }) | ({
                /** @description The ID of the character that ranked up. */
                character_id?: string;
                /** @description Internal name of the table. */
                table_type?: string;
                /** @description UTC timestamp of the event. */
                timestamp?: string;
                /** @description The ID of the world where the character ranked up. */
                world_id?: string;
                /** @description The ID of the zone where the character ranked up. */
                zone_id?: string;
              } & {
                /** @description Unique ID of the player that destroyed the vehicle. */
                attacker_character_id?: string;
                /** @description The ID of the loadout that the attacker was playing as. */
                attacker_loadout_id?: string;
                /** @description Unknown. Generally identical to `attacker_character_id`. */
                attacker_player_guid?: string;
                /** @description The ID of the vehicle that the attacker was in when they destroyed the vehicle. */
                attacker_vehicle_id?: string;
                /** @description The ID of the item that was used to destroy the vehicle. Note that this is an item ID and not the weapon ID, despite the name. */
                attacker_weapon_id?: string;
                /** @description Type of event. This generally matches the event types used by the ESS. */
                event_type?: string;
                /** @description The ID of the faction that the vehicle belonged to. */
                faction_id?: string;
                /** @description Unknown. The IDs provided in this field are not available on the `projectile` endpoint. */
                projectile_id?: string;
                /** @description The ID of the vehicle that was destroyed. */
                vehicle_definition_id?: string;
              }) | ({
                /** @description The ID of the character that ranked up. */
                character_id?: string;
                /** @description Internal name of the table. */
                table_type?: string;
                /** @description UTC timestamp of the event. */
                timestamp?: string;
                /** @description The ID of the world where the character ranked up. */
                world_id?: string;
                /** @description The ID of the zone where the character ranked up. */
                zone_id?: string;
              } & {
                /** @description Type of event. This generally matches the event types used by the ESS. */
                event_type?: string;
                /** @description The ID of the facility that was captured. */
                facility_id?: string;
                /** @description The ID of the outfit that captured the facility, or the facility that owns the facility at the time of defence. */
                outfit_id?: string;
              })) | (({
                /** @description The ID of the character that ranked up. */
                character_id?: string;
                /** @description Internal name of the table. */
                table_type?: string;
                /** @description UTC timestamp of the event. */
                timestamp?: string;
                /** @description The ID of the world where the character ranked up. */
                world_id?: string;
                /** @description The ID of the zone where the character ranked up. */
                zone_id?: string;
              } & {
                /** @description Time in seconds since the facility was held by the previous owner. */
                duration_held?: string;
                /** @description Type of event. This generally matches the event types used by the ESS. */
                event_type?: string;
                /** @description The ID of the facility that was captured. */
                facility_id?: string;
                /** @description The faction that owns the facility after the capture. */
                faction_new?: string;
                /** @description The faction that owned the facility before the capture. */
                faction_old?: string;
                /** @description Unknown. */
                objective_id?: string;
                /** @description Unique ID of the outfit that captured the facility. */
                outfit_id?: string;
              }) | ({
                /** @description The ID of the character that ranked up. */
                character_id?: string;
                /** @description Internal name of the table. */
                table_type?: string;
                /** @description UTC timestamp of the event. */
                timestamp?: string;
                /** @description The ID of the world where the character ranked up. */
                world_id?: string;
                /** @description The ID of the zone where the character ranked up. */
                zone_id?: string;
              } & {
                /** @description Type of event. This generally matches the event types used by the ESS. */
                event_type?: string;
                /** @description Experience bonus for the winning faction. */
                experience_bonus?: string;
                /** @description Current scope of the NC faction. */
                faction_nc?: string;
                /** @description Current scope of the TR faction. */
                faction_tr?: string;
                /** @description Current scope of the VS faction. */
                faction_vs?: string;
                /** @description Unique ID of this particular instance of the metagame event. Only unique per server restart, not globally. */
                instance_id?: string;
                /** @description Unique ID of the metagame event. */
                metagame_event_id?: string;
                /** @description Unique ID of the metagame event state. */
                metagame_event_state?: string;
                /** @description Name of the metagame event state. */
                metagame_event_state_name?: string;
              })))[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * experience
   * @description Lists the different types of experience ticks.
   */
  get_experience: {
    parameters: {
      query?: {
        /** @description Unique ID of the experience type. */
        experience_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            experience_list?: {
                /** @description Description of the experience type. */
                description?: string;
                /** @description Unique ID of the collection. */
                experience_id?: string;
                /** @description The amount of XP granted by this experience type. */
                xp?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * experience_rank
   * @description Player rank gained through leveling up.
   *
   * Note that the `rank` field is not unique, as each rank is duplicated for each prestige (aka. A.S.P.) level. The prestige entries can only be distinguished by their icons.
   */
  get_experience_rank: {
    parameters: {
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            experience_rank_list?: {
                nc?: {
                  /** @description The `ps2/image` of the rank for the given faction. */
                  image_id?: string;
                  /** @description The path to the image of the rank for the given faction. */
                  image_path?: string;
                  /** @description The `ps2/image_set` of the rank for the given faction. */
                  image_set_id?: string;
                  title?: {
                    /** @description German locale */
                    de?: string;
                    /** @description English locale */
                    en?: string;
                    /** @description Spanish locale */
                    es?: string;
                    /** @description French locale */
                    fr?: string;
                    /** @description Italian locale */
                    it?: string;
                    /** @description Turkish locale, unfinished and not available for most fields */
                    tr?: string;
                  };
                };
                /** @description Path to the facion-specific icon for this experience rank. */
                nc_image_path?: unknown;
                /** @description The ordinal rank of the experience type. Note that this is the same for each prestige level (0 through 3). */
                rank?: string;
                tr?: {
                  /** @description The `ps2/image` of the rank for the given faction. */
                  image_id?: string;
                  /** @description The path to the image of the rank for the given faction. */
                  image_path?: string;
                  /** @description The `ps2/image_set` of the rank for the given faction. */
                  image_set_id?: string;
                  title?: {
                    /** @description German locale */
                    de?: string;
                    /** @description English locale */
                    en?: string;
                    /** @description Spanish locale */
                    es?: string;
                    /** @description French locale */
                    fr?: string;
                    /** @description Italian locale */
                    it?: string;
                    /** @description Turkish locale, unfinished and not available for most fields */
                    tr?: string;
                  };
                };
                /** @description Path to the facion-specific icon for this experience rank. */
                tr_image_path?: unknown;
                vs?: {
                  /** @description The `ps2/image` of the rank for the given faction. */
                  image_id?: string;
                  /** @description The path to the image of the rank for the given faction. */
                  image_path?: string;
                  /** @description The `ps2/image_set` of the rank for the given faction. */
                  image_set_id?: string;
                  title?: {
                    /** @description German locale */
                    de?: string;
                    /** @description English locale */
                    en?: string;
                    /** @description Spanish locale */
                    es?: string;
                    /** @description French locale */
                    fr?: string;
                    /** @description Italian locale */
                    it?: string;
                    /** @description Turkish locale, unfinished and not available for most fields */
                    tr?: string;
                  };
                };
                /** @description Path to the facion-specific icon for this experience rank. */
                vs_image_path?: unknown;
                /** @description Unused. */
                xp_max?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * facility_link
   * @description Resolves lattice links between facilities.
   *
   * There is no reliable difference between `facility_id_a` and `facility_id_b`; the former tends to be closer to the respective warpgate, but this does not hold true for all links. It is recommended to treat the link direction as arbitrary.
   */
  get_facility_link: {
    parameters: {
      query?: {
        /** @description Unique ID of the first facility. */
        facility_id_a?: string;
        /** @description Unique ID of the second facility. */
        facility_id_b?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            facility_link_list?: {
                /** @description The description of the facility link. */
                description?: string;
                /** @description The ID of the first facility in the link. */
                facility_id_a?: string;
                /** @description The ID of the second facility in the link. */
                facility_id_b?: string;
                /** @description The ID of the zone in which the facility link is located. */
                zone_id?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * facility_type
   * @description Lists all facility types across all zones and game modes.
   */
  get_facility_type: {
    parameters: {
      query?: {
        /** @description Unique ID of the facility type. */
        facility_type_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            facility_type_list?: {
                /** @description Description of the facility type. */
                description?: string;
                /** @description Unique ID of the collection. */
                facility_type_id?: string;
                /** @description Default image of the facility type's map icon. */
                image_id?: string;
                /** @description The path to the facility type's map icon. */
                image_path?: string;
                /** @description The `ps2/image_set` of the facility type's map icon. */
                image_set_id?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * faction
   * @description Endpoint for playable and non-playable factions.
   * In addition to the main empires VS, NC, and TR, this also lists NS Operatives as the 4th faction. Note that a faction ID of zero does not denote an empty value. Instead, it represents a special "None" faction, which is used for common pool equipment, and also serves as a sentinel value for disabled facilities in the context of facility ownership.
   * When working with the Event Streaming Service (ESS), you will encounter a `team_id` field in certain payloads. This is used to control friend-or-foe status for NSO players, or for the opposing factions in Outfit Wars.
   * During regular gameplay (i.e. outside of Outfit Wars), it is generally safe to treat a team ID as a faction. However, care should be taken during Outfit Wars matches as the team IDs will map to the Alpha and Omega team instead.
   */
  get_faction: {
    parameters: {
      query?: {
        /** @description Unique identifier of a faction. */
        faction_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            faction_list?: {
                /** @description The unique tag of the faction, or `None` for common-pool nanite systems. */
                code_tag?: string;
                /** @description Unique ID of the collection. */
                faction_id?: string;
                /** @description The `ps2/image` of the faction. */
                image_id?: string;
                /** @description Relative path to the default image of the faction. */
                image_path?: string;
                /** @description The `ps2/image_set` of the faction. */
                image_set_id?: string;
                name?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
                /** @description Whether this faction is playable or reserved for NPCs. */
                user_selectable?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * fire_group
   * @description Fire groups in the API are synonymous with fire modes in-game, they represent the different operating modes some weapons can switch between.
   *
   * This includes select-fire modes for infantry weapons, as well as knives switching between quick knife, wielded knive, and - in the case of power knives - the one-hit-kill mode.
   */
  get_fire_group: {
    parameters: {
      query?: {
        /** @description Unique identifier of a fire group. */
        fire_group_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            fire_group_list?: {
                /** @description Whether the weapon can be chambered while aiming down sights. Only set on weapons with this capability by default, weapons requiring attachments such as straight-pull bolts will not have this set. */
                can_chamber_ironsights?: string;
                /** @description The time between shots on bolt action or pump action weapons. */
                chamber_duration_ms?: string;
                /** @description Unique ID of the collection. */
                fire_group_id?: string;
                /** @description Initial refire time (inverse of fire rate) for spool-up weapons. */
                spool_up_initial_refire_ms?: string;
                /** @description Time to reach maximum fire rate on spool-upup weapons. */
                spool_up_ms?: string;
                /** @description Time to transition to this fire group on select-fire weapon. */
                transition_duration_ms?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * fire_group (Legacy)
   * @description **Note:** This table has been largely superceded by `fire_mode_2`, which contains additional and more accurate information about firing mechanics.
   *
   * This endpoint shows detailed information about a given fire mode for a weapon, including damage ranges, muzzle velocity, and reload time.
   *
   * For details on the cone-of-fire mechanics, resolve the `player_state_group_id` field.
   */
  get_fire_mode: {
    parameters: {
      query?: {
        /** @description Unique identifier of a fire mode. */
        fire_mode_id?: string;
        /** @description Unique identifier of an item. */
        item_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            fire_mode_list?: {
                /** @description Baseline cone-of-fire bloom per shot. See the corresponding `ps2/player_state_group` for more information. */
                cof_recoil?: string;
                /** @description Flat damage amount for weapons without damage fall-off, such as knives. */
                damage?: string;
                /** @description Maximum direct damage for weapons with damage fall-off. */
                damage_max?: string;
                /** @description Range up to which the maximum direct projectile damage is applied. */
                damage_max_range?: string;
                /** @description Minimum direct damage for weapons with damage fall-off. */
                damage_min?: string;
                /** @description Range at which the minimum direct projectile damage is reached and no further damage fall-off is applied. */
                damage_min_range?: string;
                damage_radius?: string;
                /** @description Damage resist type used for direct hits. See `ps2/resist_type` for more information. */
                damage_resist_type?: string;
                /** @description Target types that can be damaged by this weapon's direct hits. See `ps2/target_type` for more information. */
                damage_target_type?: string;
                /** @description Description of the type of damage effect. */
                damage_type?: string;
                /** @description Default zoom level for this fire mode. */
                default_zoom?: string;
                description?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
                /** @description Unique ID of the collection. */
                fire_mode_id?: string;
                /** @description Maximum indirect damage for weapons with damage fall-off. */
                indirect_damage_max?: string;
                /** @description Range at which the maximum indirect projectile damage is applied. */
                indirect_damage_max_range?: string;
                /** @description Minimum indirect damage for weapons with damage fall-off. */
                indirect_damage_min?: string;
                /** @description ^Range at which the minimum indirect projectile damage is reached and no further damage fall-off is applied. */
                indirect_damage_min_range?: string;
                /** @description Damage resist type used for indirect hits. See `ps2/resist_type` for more information. */
                indirect_damage_resist_type?: string;
                /** @description Target types that can be damaged by this weapon's indirect hits. See `ps2/target_type` for more information. */
                indirect_damage_target_type?: string;
                /** @description The `ps2/item` to which this fire mode belongs. Note that this field is unreliable and may point to arbitrary item IDs in addition to the corresponding weapon item. */
                item_id?: string;
                /** @description On self-propelled projectiles, the upper speed cap of the projectile. Used to increase projectile speed over time for lock-on launchers. */
                max_speed?: string;
                /** @description Muzzle velocity of ballistic projectile in meters per second. */
                muzzle_velocity?: string;
                /** @description Spread between pellets in degrees. */
                pellet_spread?: string;
                /** @description Number of pellets fired per shot. Used for shotguns, as well as some outliers like the NSX Tengu or VEC Horizon. */
                pellets_per_shot?: string;
                /** @description Player state group associated with this fire mode. Contains state-dependent characteristics such as cone-of-fire. */
                player_state_group_id?: string;
                /** @description Internal description of the projectile used. */
                projectile_description?: string;
                /** @description Rechamber time after a reload. To calculate the long reload of a weapon, add this value to `reload_time_ms`. */
                reload_chamber_time_ms?: string;
                /** @description Short reload duration in milliseconds. */
                reload_time_ms?: string;
                /** @description On self-propelled projectiles, the initial speed of the projectile in meters per second. */
                speed?: string;
                /** @description Type description for the fire mode. Useful when needing to distinguish between multiple fire modes on a given weapon. */
                type?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * fire_mode_2
   * @description Main endpoint for baseline weapon characteristics and firing mechanics. This includes:
   *
   * - Damage effects and ranges
   * - Recoil magnitude and pattern
   * - Triggered abilities for pseudo-weapons such as the medical applicator
   * - Ammunition consumption and pellet count
   * - Heat-mechanics
   *
   * Be aware that lockon information is currently disconnected from the game data and has not
   * been outdated. Refer to the PS2 Wiki for up-to-date information for the time being.
   */
  get_fire_mode_2: {
    parameters: {
      query?: {
        /** @description Unique identifier of a fire mode. */
        fire_mode_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            fire_mode_2_list?: {
                /** @description Delay in milliseconds before the player can use an ability after firing. */
                ability_block_delay_ms?: string;
                /** @description The ability trigger upon firing pseudo-weapons such as the Medical Applicator or Repair Tool. */
                ability_id?: string;
                /** @description The ammo slot connected to this fire mode in the corresponding weapon. Can be matched to the `ps2/weapon.weapon_slot_index` field. */
                ammo_slot?: string;
                /** @description Unused. */
                armor_penetration?: string;
                /** @description Whether the fire mode is automatic or not, i.e. whether it will refire on its own if the trigger is held down. Note that this may conflict with the fire mode's `description`, in particular for vehicle weapons. */
                automatic?: string;
                /** @description Initial upwards angle in degrees applied to the bullet trajectory. Used to compensate for bullet drop. */
                bullet_arc_kick_angle?: string;
                /** @description Minimum charge time before the weapon can be fired. */
                charge_minimum_ms?: string;
                /** @description Unused. */
                cof_override?: string;
                /** @description Spread between pellets in degrees. */
                cof_pellet_spread?: string;
                cof_range?: string;
                /** @description Cone of fire bloom per shot in degrees. */
                cof_recoil?: string;
                /** @description Multiplier for the cone of fire values from the corresponding `ps2/player_state_group_2`. */
                cof_scalar?: string;
                /** @description Multiplier for the cone of fire values from the corresponding `ps2/player_state_group_2` while moving. */
                cof_scalar_moving?: unknown;
                /** @description The `ps2/effect` applied to the target upon a direct hit. */
                damage_direct_effect_id?: string;
                /** @description Relative headshot damage offset. Add 1 and multiple with the base damage to get the actual damage dealt. */
                damage_head_multiplier?: string;
                /** @description The splash damage `ps2/effect` applied to targets near the impact. */
                damage_indirect_effect_id?: string;
                /** @description Relative legshot damage offset. Add 1 and multiple with the base damage to get the actual damage dealt. */
                damage_legs_multiplier?: string;
                description?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
                /** @description Ammo consumed per shot. */
                fire_ammo_per_shot?: string;
                /** @description Delay between shots in a burst in milliseconds. */
                fire_auto_fire_ms?: string;
                /** @description Number of shots in a burst. */
                fire_burst_count?: string;
                /** @description Charge-up time in milliseconds. */
                fire_charge_up_ms?: string;
                /** @description Delay between pulling the trigger and the first shot in milliseconds. */
                fire_delay_ms?: string;
                /** @description Default minimap auto-detect range of the fire mode. */
                fire_detect_range?: string;
                /** @description Duration of the fire animation in milliseconds. Used for pseudo-weapons such as recon darts, spawn beacons, or deployables. */
                fire_duration_ms?: string;
                /** @description Unique ID of the fire mode. */
                fire_mode_id?: string;
                /** @description The `ps2/fire_mode_type` of the fire mode. */
                fire_mode_type_id?: string;
                /** @description Number of pellets fired per shot. Used for shotguns, as well as some outliers like the NSX Tengu or VEC Horizon. */
                fire_pellets_per_shot?: string;
                /** @description Delay before the weapon can be fired again after releasing the trigger. */
                fire_refire_ms?: string;
                /** @description If true, the fire mode is not considered as part of the grief points system and can not cause a weapon lock. */
                grief_immune?: string;
                /** @description Heat generated per shot. Together with `heat_threshold`, this provides an estimation of the effective magazine size of heat-based weapons. */
                heat_per_shot?: string;
                /** @description Delay before heat starts to recover after firing stops. */
                heat_recovery_delay_ms?: string;
                /** @description Heat threshold before the weapon overheats. Together with `heat_per_shot`, this provides an estimation of the effective magazine size of heat-based weapons. */
                heat_threshold?: string;
                iron_sights?: string;
                /** @description If true, projectiles fired will continue to follow the crosshair after firing. */
                laser_guided?: string;
                /** @description Time required to establish a lock at a distance of `lockon_range_close` metres. Interpolated linearly. */
                lockon_acquire_close_ms?: string;
                /** @description Time required to establish a lock at a distance of `lockon_range_far` metres. Interpolated linearly. */
                lockon_acquire_far_ms?: string;
                /** @description Defunct field. Always returns zero. */
                lockon_acquire_ms?: string;
                /** @description Field of view of the cone within which targets may be locked. */
                lockon_angle?: string;
                /** @description Period in which an already established lock remains active after losing line of sight with the target. This is the window during which the player may flick the mouse to shoot around obstacles. */
                lockon_lose_ms?: string;
                lockon_maintain?: string;
                /** @description Defunct field. Always returns zero. */
                lockon_radius?: string;
                /** @description Defunct field. Always returns zero. */
                lockon_range?: string;
                /** @description Distance at which `lockon_acquire_close_ms` is applied. Note that this is not a minimum distance from the target, only a lower bound for the lock-on time. */
                lockon_range_close?: string;
                /** @description Distance at which `lockon_acquire_far_ms` is applied. Note that this may not line up with the maximum range at which a lock can be established. */
                lockon_range_far?: string;
                lockon_required?: string;
                /** @description Maximum direct damage amount. For weapons with damage fall-off, this is applied at `max_damage_range`. */
                max_damage?: string;
                /** @description Maximum indirect damage amount at the centre of the blast radius. */
                max_damage_ind?: string;
                /** @description Inner radius of the indirect damage effect at which `max_damage_ind` is applied. */
                max_damage_ind_radius?: string;
                /** @description Distance at which `max_damage` is applied. */
                max_damage_range?: string;
                /** @description Minimum direct damage amount. For weapons with damage fall-off, this is applied at `min_damage_range`. For weapons with a flat damage profile, only `max_damage` may be set, with this field being NULL. */
                min_damage?: string;
                /** @description Indirect damage amount at the edge of the blast radius. */
                min_damage_ind?: string;
                /** @description Outer edge of the indirect damage blast radius where `min_damage_ind` is applied. */
                min_damage_ind_radius?: string;
                /** @description Distance at which `min_damage` is applied. */
                min_damage_range?: string;
                /** @description Movement speed modifier applied while the fire mode is active. */
                move_modifier?: string;
                /** @description The `ps2/player_state_group` controlling this fire mode. */
                player_state_group_id?: string;
                /** @description Optional override for the base movement speed defined in the corresponding projectile. */
                projectile_speed_override?: string;
                /** @description Maximum recoil angle in degrees. Recoil angles is measured clockwise relative to vertical, so a positive value means the weapon will pull to the right. This defines the basic axis of the recoil pattern, "horizontal" recoil is orthogonal to this axis. */
                recoil_angle_max?: string;
                /** @description Minimum recoil angle in degrees. Recoil angles is measured clockwise relative to vertical, so a positive value means the weapon will pull to the right. This defines the basic axis of the recoil pattern, "horizontal" recoil is orthogonal to this axis. */
                recoil_angle_min?: string;
                /** @description Vertical recoil multiplier for the first shot in a burst. */
                recoil_first_shot_modifier?: string;
                /** @description Upper limit for the horizontal recoil per shot in degrees. */
                recoil_horizontal_max?: string;
                /** @description Like `reload_increase`, but only affects the horizontal recoil components. */
                recoil_horizontal_max_increase?: string;
                /** @description Upper limit for the horizontal recoil per shot in degrees. */
                recoil_horizontal_min?: string;
                /** @description Like `reload_increase`, but only affects the horizontal recoil components. */
                recoil_horizontal_min_increase?: string;
                /** @description Symmetric tolerance for the horizontal recoil pattern. After exceeding half of this value in either direction, the recoil is guaranteed to kick back towards the center for the next shot. */
                recoil_horizontal_tolerance?: string;
                /** @description Recoil increase per shot in degrees. */
                recoil_increase?: string;
                /** @description Recoil increase per shot in degrees while crouched. */
                recoil_increase_crouched?: string;
                /** @description Maximum recoil magnitude in degrees. */
                recoil_magnitude_max?: string;
                /** @description Minimum recoil magnitude in degrees. */
                recoil_magnitude_min?: string;
                /** @description Total recoil limit in degrees. */
                recoil_max_total_magnitude?: string;
                /** @description Acceleration of the recoil recovery. High values lead to linear recoil recovery. */
                recoil_recovery_acceleration?: string;
                /** @description Delay before the recoil recovery starts in milliseconds. */
                recoil_recovery_delay_ms?: string;
                /** @description Recoil recovery rate in degrees per second. */
                recoil_recovery_rate?: string;
                /** @description Number of shots fired before the recoil magnitude starts to decrease. */
                recoil_shots_at_min_magnitude?: string;
                /** @description For magazine-fed weapons, the actual time of the reload, not counting the animation or chambering time. */
                reload_ammo_fill_ms?: string;
                /** @description If true, an empty magazine will force the player out of ADS in order to reload. */
                reload_block_auto?: string;
                /** @description For weapons with magazines, the extra time taken to chamber after a reload. To calculate the long reload, add this value to `reload_time_ms`. */
                reload_chamber_ms?: string;
                /** @description Whether the weapon uses a per-shell reload animation, such as pump-action shotguns. */
                reload_continuous?: string;
                /** @description For tube-fed weapons (pump-action shotguns), the final delay after reloading is complete or has been cancelled before the weapon can fire. */
                reload_loop_end_ms?: string;
                /** @description For tube-fed weapons (pump-action shotguns), the initial delay before the first shell is chambered. */
                reload_loop_start_ms?: string;
                /** @description Reload time in milliseconds. For magazine-fed weapons, this is the short reload. For tube-fed weapons (pump-action shotguns), this represents the reload interval. */
                reload_time_ms?: string;
                shield_bypass_pct?: string;
                /** @description Delay in milliseconds before the player can start sprinting after firing. */
                sprint_block_delay_ms?: string;
                /** @description Whether the firte mode can be used while sprinting. */
                sprint_fire?: string;
                /** @description Amplitude of the sinusoidal scope sway in degrees. */
                sway_amplitude_x?: string;
                /** @description Amplitude of the sinusoidal scope sway in degrees. */
                sway_amplitude_y?: string;
                /** @description Whether scope sway can be steadied by holding breath. */
                sway_can_steady?: string;
                /** @description Period of the sinusoidal scope sway in seconds. */
                sway_period_x?: string;
                /** @description Period of the sinusoidal scope sway in seconds. */
                sway_period_y?: string;
                /** @description Turn speed modifier applied while the fire mode is active. */
                turn_modifier?: string;
                /** @description Whether the fire mode can be used while submerged. */
                use_in_water?: string;
                /** @description Default zoom level for the fire mode. */
                zoom_default?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * fire_mode_to_projectile
   * @description Maps fire modes to their projectiles.
   */
  get_fire_mode_to_projectile: {
    parameters: {
      query?: {
        /** @description Unique identifier of a fire mode. */
        fire_mode_id?: string;
        /** @description Unique identifier of an item. */
        item_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            fire_mode_to_projectile_list?: {
                /** @description Fire mode side of the relationship. */
                fire_mode_id?: string;
                /** @description Projectile side of the relationship. */
                projectile_id?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * fire_mode_type
   * @description Enumeration of the types of fire modes.
   *
   * This servers to differentiate between melee attacks, projectile weapons, throwables, and pseudo-weapon fire modes used to trigger activated items.
   */
  get_fire_mode_type: {
    parameters: {
      query?: {
        /** @description Unique identifier of a fire mode type. */
        fire_mode_type_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            fire_mode_type_list?: {
                /** @description Description of the type of fire mode */
                description?: string;
                /** @description Unique ID of the fire mode type. */
                fire_mode_type_id?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * image
   * @description Lists individual image assets available on the API.
   *
   * Note that historically, not all assets listed here are available on the image endpoint, and not all available assets are listed.
   */
  get_image: {
    parameters: {
      query?: {
        /** @description Unique identifier of an image. */
        image_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            image_list?: {
                /** @description Description of the asset. */
                description?: string;
                /** @description Unique ID of the image. */
                image_id?: string;
                /** @description Relative to the image asset. Prefix the base URL to the Census API endpoint to create a fully-qualified URL. */
                path?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * image_set
   * @description Lists related image assets belonging to the same set.
   *
   * Note that this endpoint is a mapping; the `image_set_id` is not a unique key. The individual image types in a set are generally used to provide different sizes of the same image (e.g. icon previes or minimal icons).
   */
  get_image_set: {
    parameters: {
      query?: {
        /** @description Identifier of an image set. */
        image_set_id?: string;
        /** @description Unique identifier of an image. */
        image_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            image_set_list?: {
                /** @description Description of the image set. */
                description?: string;
                /** @description ID of the image asset for this image set and type. */
                image_id?: string;
                /** @description Relative to the image asset. Prefix the base URL to the Census API endpoint to create a fully-qualified URL. */
                image_path?: string;
                /** @description ID of the image set. Note that this is not a unique ID, this collection is a mapping. */
                image_set_id?: string;
                /** @description Type description of the current image within the set. Usually, this refers to scale. */
                type_description?: string;
                /** @description Type ID of the current image within the set. Usually, this refers to scale. */
                type_id?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * image_set_default
   * @description Lists the default image for a given image set.
   */
  get_image_set_default: {
    parameters: {
      query?: {
        /** @description Identifier of an image set. */
        image_set_id?: string;
        /** @description Unique identifier of an image. */
        image_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            image_set_default_list?: {
                /** @description Description of the image set. */
                description?: string;
                /** @description ID of the image asset for this image set and type. */
                image_id?: string;
                /** @description Relative to the image asset. Prefix the base URL to the Census API endpoint to create a fully-qualified URL. */
                image_path?: string;
                /** @description ID of the image set. Note that this is not a unique ID, this collection is a mapping. */
                image_set_id?: string;
                /** @description Type description of the current image within the set. Usually, this refers to scale. */
                type_description?: string;
                /** @description Type ID of the current image within the set. Usually, this refers to scale. */
                type_id?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * item
   * @description Items in PlanetSide 2 are used to represent weapons, tools, and consumables, but also cosmetic items and internal control objects for player renaming or outfit resource consumption. Use the `item_type` collection to narrow searches to specific types.
   */
  get_item: {
    parameters: {
      query?: {
        /** @description Unique identifier of an item. */
        item_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            item_list?: {
                /** @description The active `ps2/ability` granted upon equipping this item, such as the Heavy Assault's Overshield or MAX abilities. */
                activatable_ability_id?: string;
                description?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
                /** @description The `ps2/faction` of the item. Items with a faction ID of 0 are common-pool and available to all factions. */
                faction_id?: string;
                /** @description The `ps2/image` of the item's display icon. */
                image_id?: string;
                /** @description Relative path to the default image of the item. */
                image_path?: string;
                /** @description The `ps2/image_set` of the item's display icon. */
                image_set_id?: string;
                /** @description If true, the item is auto-granted to the player, such as the default scope and ammo types. */
                is_default_attachment?: string;
                /** @description Whether this item is a vehicle weapon. */
                is_vehicle_weapon?: string;
                /** @description The `ps2/item_category` of the item. */
                item_category_id?: string;
                /** @description Unique ID of the collection. */
                item_id?: string;
                /** @description The `ps2/item_type` of the item. */
                item_type_id?: string;
                /** @description The maximum number of this item that can be held at once. Primarily used for consumables or carried explosives. */
                max_stack_size?: string;
                name?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
                /** @description The passive `ps2/ability` granted upon equipping this item, such as a suppressor or scope. */
                passive_ability_id?: string;
                /** @description The `ps2/skill_set` of the item. Remnant of the original certification menu, used to unlock the weapon in the certification skill tree and lock out purchasing of attachments for weapons the player has not unlocked yet. */
                skill_set_id?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * item_attachment
   * @description Maps attachment items to the items they can be attached to.
   */
  get_item_attachment: {
    parameters: {
      query?: {
        /** @description Unique identifier of an item. */
        item_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            item_attachment_list?: {
                /** @description Item that can be attached to the `item_id`. */
                attachment_item_id?: string;
                /** @description Host item the `attachment_item_id` can be attached to. */
                item_id?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * item_category
   * @description Item categories are used to group items together for display in the loadout screen or depot.
   */
  get_item_category: {
    parameters: {
      query?: {
        /** @description Unique identifier of an item category. */
        item_category_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            item_category_list?: {
                /** @description Unique ID of the collection. */
                item_category_id?: string;
                name?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * item_profile
   * @description Maps items to profiles (classes/vehicles) that have access to them.
   */
  get_item_profile: {
    parameters: {
      query?: {
        /** @description Unique identifier of an item. */
        item_id?: string;
        /** @description Unique identifier of a profile. */
        profile_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            item_profile_list?: {
                /** @description Item side of the relationship. */
                item_id?: string;
                /** @description Profile side of the relationship. */
                profile_id?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * item_to_weapon
   * @description Maps items (including name, availability) to its respective weapon object.
   *
   * Not all items have a weapon objects, though some filtering can be done through the `item_type_id` field, with the ID 26 representing most weapon types.
   */
  get_item_to_weapon: {
    parameters: {
      query?: {
        /** @description Unique identifier of an item. */
        item_id?: string;
        /** @description Unique identifier of a weapon. */
        weapon_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            item_to_weapon_list?: {
                /** @description Item side of the relationship. */
                item_id?: string;
                /** @description Weapon side of the relationship. */
                weapon_id?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * item_type
   * @description Items in PlanetSide 2 represent many different things beyond weapons, such as implant packs, cosmetics, or name change tokens. They are also used as internal helpers when pulling outfit resources, spawning vehicles, or interacting with certain terminals.
   *
   * This collection lists the different item types, though many of these are never encountered on the API.
   */
  get_item_type: {
    parameters: {
      query?: {
        /** @description Unique identifier of an item type. */
        item_type_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            item_type_list?: {
                /** @description Internal code of the item type. */
                code?: string;
                /** @description Unique ID of the collection. */
                item_type_id?: string;
                /** @description Display name of the item type. */
                name?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * leaderboard
   * @description Global leaderboard for a given server. This only includes the top 10'000 players for a given category and is not directly searchable. See `characters_leaderboard` to look up a character's ranking.
   *
   * `c:start` and `c:limit` are supported and allow for pagination. `c:join` and `c:tree` are also permitted. Any other query commands will be silently ignored.
   *
   * Unlike most other tables, this one defaults to a `c:limit` value of 10 and is always sorted in ascending order of leaderboard rank.
   */
  get_leaderboard: {
    parameters: {
      query: {
        /** @description Name of a statistic for leaderboards. */
        name: "Kills" | "Score" | "Time" | "Deaths";
        /** @description Time period for a leadboard. */
        period: "Forever" | "Monthly" | "Weekly" | "Daily" | "OneLife";
        /** @description Unique identifier of a world. */
        world_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            count?: number;
            key?: string;
            limit?: number;
            leaderboard_list?: {
                /** @description The ID of the character. */
                character_id?: string;
                /** @description The rank of the character for the given statistic. */
                rank?: string;
                /** @description The all-time value of the given statistic. */
                value?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * loadout
   * @description Enumeration of the six infantry classes for each playable faction.
   *
   * Note that this is different from the in-game loadouts, which are not available on the API.
   */
  get_loadout: {
    parameters: {
      query?: {
        /** @description Unique identifier of a loadout. */
        loadout_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            loadout_list?: {
                /** @description Internal name of the loadout. */
                code_name?: string;
                /** @description The `ps2/faction` of the loadout. */
                faction_id?: string;
                /** @description Unique ID of the collection. */
                loadout_id?: string;
                /** @description The `ps2/profile_2` matching this loadout. */
                profile_id?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * map
   * @description Map status endpoint.
   *
   * This collection can only be queried with a single `world_id` and any number of `zone_ids` (note that the parameter is plural). Also note the non-standard payload format requiring different parsing rules.
   *
   * For partially locked continents, the unavailable regions will report a `FactionId` of zero.
   */
  get_map: {
    parameters: {
      query?: {
        /** @description Unique identifier of a world. */
        world_id?: string;
        /** @description Unique identifier of a zone. */
        zone_ids?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            map_list?: {
                Regions?: {
                  /** @description Irrelevant field, always true. */
                  IsList?: string;
                  /** @description List of map row entries. */
                  Row?: {
                      RowData?: {
                        /** @description Faction that owns the region. */
                        FactionId?: string;
                        /** @description Region for which ownership data is returned. */
                        RegionId?: string;
                      };
                    }[];
                };
                /** @description Zone for which map data is returned. */
                ZoneId?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * map_hex
   * @description Endpoint for retrieving map hex coordinates.
   * This data can be used to reconstruct the in-game facility outlines from API data.
   *
   * The X and Y coordinates listed in the entries to this collection are not Cartesian and do not match up with the `location_<n>` fields of `map_region`. Instead, they are describing locations in a non-orthogonal hexagonal grid, which must be converted by the user.
   *
   * This website has a great write-up on hexagonal coordinate systems: <https://www.redblobgames.com/grids/hexagons/>.
   * The coordinate system used by PlanetSide 2 matches the "Axial coordinates" described in the article, except that the first coordinate X faces east, and the second coordinate Y faces up and to the right at a 60° angle.
   */
  get_map_hex: {
    parameters: {
      query?: {
        /** @description Unique identifier of a map region. */
        map_region_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            map_hex_list?: {
                /** @description Type of the hex. 0: capturable by anyone, 1: not capturable, 2: locked to a single faction. */
                hex_type?: string;
                /** @description Region for which a hex is returned. */
                map_region_id?: string;
                /** @description Name of the hex type. */
                type_name?: string;
                /** @description X coordinate of the hex. See the endpoint documentation for `map_hex` for details on converting these indices into Cartesian coordinates. */
                x?: string;
                /** @description Y coordinate of the hex. See the endpoint documentation for `map_hex` for details on converting these indices into Cartesian coordinates. */
                y?: string;
                /** @description Zone containing the region for which a hex is returned. */
                zone_id?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * map_region
   * @description A region on the in-game map.
   *
   * Map regions are largely identical to their corresponding regions, but use the internal `facility_name` instead of a localized string. A `map_region_id` and `region_id` are interchangeable.
   *
   * Additionally, this collection allows connecting facilities to map region IDs.
   *
   * Note that the continuous outfit resource gain is listed in "ticks", not minutes. Ticks are 5 minutes as of writing, meaning that a Tech Plant will list a tick reward of 8 Synthium, corresponding to the 1.6 Synthium per minute advertised in-game.
   */
  get_map_region: {
    parameters: {
      query?: {
        /** @description Unique identifier of a map region. */
        map_region_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            map_region_list?: {
                capture_reward?: {
                  /** @description Amount of the outfit resource granted for capturing this region. */
                  amount?: string;
                  /** @description Internal name of the outfit resource granted for capturing this region. */
                  description?: string;
                };
                /** @description Capturable facility associated with the map region. Note that some regions do not have facilities associated with them, such as The Shattered Warpgate. */
                facility_id?: string;
                /** @description Internal name of the facility. See the corresponding `region` for a localized value. */
                facility_name?: string;
                /** @description Internal name of the facility type. */
                facility_type?: string;
                /** @description Type of the facility associated with the map region. */
                facility_type_id?: string;
                /** @description North-south coordinate of the map region. */
                location_x?: string;
                /** @description Elevation of the map region. */
                location_y?: string;
                /** @description East-west coordinate of the map region. */
                location_z?: string;
                /** @description Unique ID of the collection. */
                map_region_id?: string;
                /** @description Defunct field. Used to list the amount of domain-specific resources (air/vehicles/infantry) granted for owning this facility. */
                reward_amount?: string;
                /** @description Defunct field. Used to list the type of domain-specific resources (air/vehicles/infantry) granted for owning this facility. */
                reward_currency_id?: string;
                tick_reward?: {
                  /** @description Amount of the outfit resource granted per tick while holding this region. */
                  amount?: string;
                  /** @description Internal name of the outfit resource granted while holding this region. */
                  description?: string;
                };
                /** @description Zone the map region is located in. */
                zone_id?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * marketing_bundle
   * @description Bundles available for purchase in the in-game store (Depot). This collection represents actual bundles. For pseudo-bundles used to purchase individual weapon attachments or cosmetics, see the `marketing_bundle_with_1_item` collection instead.
   *
   * Note that there is no guaranteed way of determining whether a given bundle is currently available for purchase. This collection contains many entries for defunct items and bundles, such as the single-use camos from the early days of the game.
   *
   * This collection is automatically maintained and generally accurate with regards to certification prices, the daybreak/station cash values are generally less reliable.
   */
  get_marketing_bundle: {
    parameters: {
      query?: {
        /** @description Unique identifier of a marketing bundle. */
        marketing_bundle_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            marketing_bundle_list?: {
                /** @description The price of the marketing bundle in Certification Points. */
                cert_price?: string;
                description?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
                /** @description The `ps2/image` of the marketing bundle's display icon. */
                image_id?: string;
                /** @description Unique ID of the collection. */
                marketing_bundle_id?: string;
                name?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
                /** @description The time the marketing bundle was released as a UTC timestamp. */
                release_time?: string;
                /** @description The price of the marketing bundle in Station Cash. */
                station_cash_price?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * marketing_bundle_item
   * @description Maps marketing bundles to the items they contain.
   */
  get_marketing_bundle_item: {
    parameters: {
      query?: {
        /** @description Unique identifier of a marketing bundle. */
        marketing_bundle_id?: string;
        /** @description Unique identifier of an item. */
        item_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            marketing_bundle_item_list?: {
                /** @description Item side of the relationship. */
                item_id?: string;
                /** @description Marketing bundle side of the relationship. */
                marketing_bundle_id?: string;
                /** @description The quantity of the item in the marketing bundle. */
                quantity?: string;
                /** @description The time the marketing bundle was released as a UTC timestamp. */
                release_time?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * marketing_bundle_with_1_item
   * @description These are pseudo-bundles with exactly 1 item each, allowing players to buy individual weapons or cosmetics with Daybreak Cash (formerly Station Cash).
   *
   * Note that in the case of weapons, these bundles are genreally mirrored by 'regular' bundles in the `marketing_bundle` collection, with the same `marketing_bundle_id`.
   */
  get_marketing_bundle_with_1_item: {
    parameters: {
      query?: {
        /** @description Unique identifier of a marketing bundle. */
        marketing_bundle_id?: string;
        /** @description Unique identifier of an item. */
        item_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            marketing_bundle_with_1_item_list?: {
                /** @description The price of the marketing bundle in Certification Points. */
                cert_price?: string;
                /** @description Item side of the relationship. */
                item_id?: string;
                /** @description The quantity of the item in the marketing bundle. */
                item_quantity?: string;
                /** @description Marketing bundle side of the relationship. */
                marketing_bundle_id?: string;
                /** @description The time the marketing bundle was released as a UTC timestamp. */
                release_time?: string;
                /** @description The price of the marketing bundle in Daybreak Cash (formerly Station Cash). */
                station_cash_price?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * metagame_event
   * @description In-game alerts and other alert-like events.
   *
   * Note that this endpoint lists alert types that are not currently enabled in-game, such as the 'Aerial Anomaly' and 'MAXimum Pressure' alert types.
   */
  get_metagame_event: {
    parameters: {
      query?: {
        /** @description Unique identifier of a metagame event. */
        metagame_event_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            metagame_event_list?: {
                description?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
                /** @description The experience bonus applied during the alert in percent. */
                experience_bonus?: string;
                /** @description Unique ID of the collection. */
                metagame_event_id?: string;
                name?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
                /** @description The type of the alert. */
                type?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * metagame_event_state
   * @description Enumeratess the available states for alerts.
   */
  get_metagame_event_state: {
    parameters: {
      query?: {
        /** @description Unique identifier of a metagame event state. */
        metagame_event_state_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            metagame_event_state_list?: {
                /** @description Unique ID of the collection. */
                metagame_event_state_id?: string;
                /** @description Internal name of the event state. */
                name?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * objective
   * @description An objective tracking progress towards a directive, mission, or achievement.
   *
   * See the `objective_type` collection for a list of available objective types.
   */
  get_objective: {
    parameters: {
      query?: {
        /** @description Unique identifier of an objective. */
        objective_id?: string;
        /** @description Unique identifier of an objective type. */
        objective_type_id?: string;
        /** @description Unique identifier of an objective group. */
        objective_group_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            objective_list?: {
                /** @description Unknown. This field allows connecting objectives to directives via the `ps2/objective_set_to_objective` collection. */
                objective_group_id?: string;
                /** @description Unique ID of the collection. */
                objective_id?: string;
                /** @description The `ps2/objective_type` of the objective. */
                objective_type_id?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/objective_type` for details. */
                param1?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/objective_type` for details. */
                param2?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/objective_type` for details. */
                param3?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/objective_type` for details. */
                param4?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/objective_type` for details. */
                param5?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/objective_type` for details. */
                param6?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/objective_type` for details. */
                param7?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/objective_type` for details. */
                param8?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/objective_type` for details. */
                param9?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * objective_set_to_objective
   * @description Maps objective sets to objective groups.
   *
   * This collection is peculiar as neither of the types it connects are available on the API. It is however essential for connecting the `directive` collection to `objective` and `objective_type`.
   *
   * Note that when joining to these queries, the `^on:` and `^to:` fields must be used to specify the relationship.
   */
  get_objective_set_to_objective: {
    parameters: {
      query?: {
        /** @description Unique identifier of an objective set. */
        objective_set_id?: string;
        /** @description Unique identifier of an objective group. */
        objective_group_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            objective_set_to_objective_list?: {
                /** @description Objective group side of the relationship. */
                objective_group_id?: string;
                /** @description Objective set side of the relationship. */
                objective_set_id?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * objective_type
   * @description A type of objective.
   *
   * The generic `paramX` fields are documented here. Note that not all fields are used by all objective types, or at all.
   */
  get_objective_type: {
    parameters: {
      query?: {
        /** @description Unique identifier of an objective type. */
        objective_type_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            objective_type_list?: {
                /** @description The description of the objective type. */
                description?: string;
                /** @description Unique ID of the collection. */
                objective_type_id?: string;
                /** @description Documentation for this numeric parameter on objectives of this type. */
                param1?: string;
                /** @description Documentation for this numeric parameter on objectives of this type. */
                param2?: string;
                /** @description Documentation for this numeric parameter on objectives of this type. */
                param3?: string;
                /** @description Documentation for this numeric parameter on objectives of this type. */
                param4?: string;
                /** @description Documentation for this numeric parameter on objectives of this type. */
                param5?: string;
                /** @description Documentation for this numeric parameter on objectives of this type. */
                param6?: string;
                /** @description Documentation for this numeric parameter on objectives of this type. */
                param7?: string;
                /** @description Documentation for this numeric parameter on objectives of this type. */
                param8?: string;
                /** @description Documentation for this numeric parameter on objectives of this type. */
                param9?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * outfit
   * @description A player-run outfit or clan.
   */
  get_outfit: {
    parameters: {
      query?: {
        /** @description Unique identifier of an outfit. */
        outfit_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            outfit_list?: {
                /** @description The outfit's alias (aka. tag), or an empty string if the outfit has no alias. */
                alias?: string;
                /** @description Lowercase version of `alias`. */
                alias_lower?: string;
                /** @description The `ps2/character` of the outfit's leader. */
                leader_character_id?: string;
                /** @description Number of members in the outfit. */
                member_count?: string;
                /** @description Canonical name of the outfit. */
                name?: string;
                /** @description Lowercase version of `name`. */
                name_lower?: string;
                /** @description Unique ID of the collection. */
                outfit_id?: string;
                /** @description Time the outfit was created. */
                time_created?: string;
                /** @description Human-readable version of `time_created`. */
                time_created_date?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * outfit_member
   * @description Outfit membership information for a givne character. Characters that are not members of any outfit will not have an entry in this collection.
   */
  get_outfit_member: {
    parameters: {
      query?: {
        /**
         * @description Unique identifier of a charcter. Note that character IDs are not guaranteed to be unique across games; the same ID may be assigned to different characters for `ps2` than for `ps2ps4us`.
         *
         * When converting this value to native representations, note that a 64 bit integer type is required to avoid truncation.
         */
        character_id?: string;
        /** @description Unique identifier of an outfit. */
        outfit_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            outfit_member_list?: {
                /** @description The `ps2/character` for this membership entry. */
                character_id?: string;
                /** @description Time the character joined the outfit. */
                member_since?: string;
                /** @description Human-readable version of `member_since`. */
                member_since_date?: string;
                /** @description The `ps2/outfit` the character is a member of. */
                outfit_id?: string;
                /** @description Custom rank of the character in the outfit. */
                rank?: string;
                /** @description Ordinal of the character's rank in the outfit. Lower values are higher ranks. */
                rank_ordinal?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * outfit_member_extended
   * @description Another variant of the `outfit_member` collection, but with the contents of the corresponding `outfit` merged in. This is useful for bulk lookups of outfit information for heterogenous lists of characters without requiring the explicit use of `c:join` or `c:resolve`.
   */
  get_outfit_member_extended: {
    parameters: {
      query?: {
        /**
         * @description Unique identifier of a charcter. Note that character IDs are not guaranteed to be unique across games; the same ID may be assigned to different characters for `ps2` than for `ps2ps4us`.
         *
         * When converting this value to native representations, note that a 64 bit integer type is required to avoid truncation.
         */
        character_id?: string;
        /** @description Unique identifier of an outfit. */
        outfit_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            outfit_member_extended_list?: {
                /** @description The outfit's alias (aka. tag), or an empty string if the outfit has no alias. */
                alias?: string;
                /** @description Lowercase version of `alias`. */
                alias_lower?: string;
                /** @description The `ps2/character` for this membership entry. */
                character_id?: string;
                /** @description The `ps2/character` of the outfit's leader. */
                leader_character_id?: string;
                /** @description Number of members in the outfit. */
                member_count?: string;
                /** @description Custom rank of the character in the outfit. */
                member_rank?: string;
                /** @description Ordinal of the character's rank in the outfit. Lower values are higher ranks. */
                member_rank_ordinal?: string;
                /** @description Time the character joined the outfit. */
                member_since?: string;
                /** @description Human-readable version of `member_since`. */
                member_since_date?: string;
                /** @description Canonical name of the outfit. */
                name?: string;
                /** @description Lowercase version of `name`. */
                name_lower?: string;
                /** @description The `ps2/outfit` the character is a member of. */
                outfit_id?: string;
                /** @description Time the outfit was created. */
                time_created?: string;
                /** @description Human-readable version of `time_created`. */
                time_created_date?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * outfit_rank
   * @description Outfits can define their own custom rank names and permissions, which are listed here. Outfits using the default rank names may not have an entry here.
   */
  get_outfit_rank: {
    parameters: {
      query?: {
        /** @description Unique identifier of an outfit. */
        outfit_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            outfit_rank_list?: {
                /** @description Custom description of the rank. */
                description?: string;
                /** @description Custom name of the rank. */
                name?: string;
                /** @description Ordinal of the rank. Lower values are higher ranks. */
                ordinal?: string;
                /** @description The `ps2/outfit` the rank belongs to. */
                outfit_id?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * profile (Infantry)
   * @description Original endpoint for infantry profiles. This covers the names and loadout IDs connected to a given profile, and additionally provides movement speed multiplier information for infantry classes. Note that the key fields are also provided by `profile_2`, which not only covers infantry but also vehicles, deployables, and other entities.
   */
  get_profile: {
    parameters: {
      query?: {
        /** @description Unique identifier of a profile. */
        profile_id?: string;
        /** @description Unique identifier of a loadout. */
        loadout_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            profile_list?: {
                /** @description The modifier applied to the movement speed when walking backwards. */
                backpedal_speed_modifier?: string;
                /** @description The modifier applied to the movement speed when crouching. */
                crouch_speed_modifier?: string;
                description?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
                /** @description The `ps2/faction` of the profile. */
                faction_id?: string;
                /** @description The `ps2/image` of the profile. */
                image_id?: string;
                /** @description Relative path to the default image of the profile. */
                image_path?: string;
                /** @description The `ps2/image_set` of the profile. */
                image_set_id?: string;
                /** @description The base movement speed of the profile. */
                movement_speed?: string;
                name?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
                /** @description Unique ID of the collection. */
                profile_id?: string;
                /** @description Internal description for the associated `profile_type_id`. */
                profile_type_description?: string;
                /** @description The type of the profile. There is no public `profile_type` collection, this is an internal ID. */
                profile_type_id?: string;
                /** @description The modifier applied to the movement speed when sprinting. */
                sprint_speed_modifier?: string;
                /** @description The modifier applied to the movement speed when strafing. */
                strafe_speed_modifier?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * profile_2 (All)
   * @description Extended profile endpoint containing all entity types, including NPCs, construction items, and deployables.
   */
  get_profile_2: {
    parameters: {
      query?: {
        /** @description Unique identifier of a profile. */
        profile_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            profile_2_list?: {
                /** @description Internal description of this profile. Not localized or user-facing. */
                description?: string;
                /** @description Unique ID of the collection. Note that this is one of the few collections where the ID field is not `<collection>_id`. */
                profile_id?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * profile_armor_map
   * @description Maps profiles to the relevant `armor_info` entries.
   *
   * Note that many of the IDs used here are only available in `profile_2`. Additionally, armor values only concern vehicles, with infantry and deployable classes not having any entries here.
   */
  get_profile_armor_map: {
    parameters: {
      query?: {
        /** @description Unique ID of the armor info entry. */
        armor_info_id?: string;
        /** @description Unique identifier of a profile. */
        profile_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            profile_armor_map_list?: {
                /** @description The armor info side of the relationship. */
                armor_info_id?: string;
                /** @description The profile side of the relationship. */
                profile_id?: string;
                /** @description Unknown. Always 1 as of 2023-06-09. */
                rank?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * profile_resist_map
   * @description Maps profiles to the relevant `resist_info` entries. Note that many of the profile IDs used here are only available in the `profile_2` collection.
   */
  get_profile_resist_map: {
    parameters: {
      query?: {
        /** @description Unique identifier of a resist info entry. */
        resist_info_id?: string;
        /** @description Unique identifier of a profile. */
        profile_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            profile_resist_map_list?: {
                /** @description The profile side of the relationship. */
                profile_id?: string;
                /** @description Unknown. */
                rank?: string;
                /** @description The resist info side of the relationship. */
                resist_info_id?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * projectile
   * @description Projectiles specify the travel characteristics of a weapon on its way to the target, such as its speed, its bullet drop, or maximum flight time/distance.
   *
   * Note that multiple fire modes can use the same projectile. This usually includes the hipfire vs. aimed fire modes, but can also include different weapons altogether.
   */
  get_projectile: {
    parameters: {
      query?: {
        /** @description Unique identifier of a projectile. */
        projectile_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            projectile_list?: {
                /** @description The acceleration of the projectile in metres per second per second. If NULL, the projectile will not accelerate and retain its initial speed. */
                acceleration?: string;
                /** @description Minimum travel distance before the projectile is armed and can detonate. Used for Flak and Archer explosions. */
                arm_distance?: string;
                /** @description Proximity required for Flak detonation. */
                detonate_distance?: string;
                /** @description Whether the projectile will detonate on contact with a surface or player. */
                detonate_on_contact?: string;
                drag?: string;
                /** @description Gravity applied to the projectile in metres per second per second. Togther with the current `speed`, this can be used to calculate bullet drop over time. */
                gravity?: string;
                /** @description Lifespan of the projectile in seconds. Together with `speed`, `acceleration`, and `speed_max`, this can be used to calculate the maximum range of a given projectile. */
                lifespan?: string;
                /** @description Acceleration of the projectile while locked onto a target. */
                lockon_acceleration?: string;
                /** @description Duration of the lock-on effect in seconds. After this time, the lock will be lost. */
                lockon_lifespan?: string;
                /** @description Field of view of the projectile when tracking a target. If the target escapes this cone, the lock is lost. */
                lockon_lose_angle?: string;
                /** @description Distance at which the projectile will proximity-lock onto a target while in flight. Note that this value designates the diameter of the sphere of influence, not the radius. */
                lockon_proximity_distance?: string;
                /** @description Whether a dumb-fired projectile will attempt to lock onto targets in flight. Used by the Coyote and Hyena missile launchers. */
                lockon_seek_in_flight?: string;
                /** @description The `ps2/projectile_flight_type` of the projectile. */
                projectile_flight_type_id?: string;
                /** @description Unique ID of the projectile. */
                projectile_id?: string;
                /** @description The radius of the projectile in metres. Relevant to hitbox collisions. */
                projectile_radius?: string;
                /** @description The initial speed of the projectile upon firing in meters per second. Note that this may be different from the muzzle velocity displayed for a given weapon. */
                speed?: string;
                /** @description Upper bound of the speed of the projectile in meters per second. On projectiles with a non-NULL `acceleration`, this is the top speed the projectile will reach. */
                speed_max?: string;
                /** @description Whether the projectile will stick to infantry on contact. Note that in addition to Sticky Grenades, this will also be true for projectiles that only stick to MAXes, such as Nano-Repair or Anti-Vehicle Grenades. */
                sticks_to_players?: string;
                /** @description Whether the projectile will stick to surfaces. This includes Sticky Grenades and bricks of C-4 explosives. */
                sticky?: string;
                tether_distance?: unknown;
                /** @description Turn rate of the projectile in degrees per second. Used to limit the ability of lock-on projectiles to track their target. */
                turn_rate?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * projectile_flight_type
   * @description Enumerates the flight types used to categorize projectiles by their travel characteristics.
   *
   * This mostly controls whether the projectile is ballistic, Flak-based, or "Dynamic", used to represent thrown items such as grenades, explosives, and ammo packs.
   */
  get_projectile_flight_type: {
    parameters: {
      query?: {
        /** @description Unique identifier of a projectile flight type. */
        projectile_flight_type_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            projectile_flight_type_list?: {
                /** @description Description of the projectile flight type. */
                description?: string;
                /** @description Unique ID of the collection. */
                projectile_flight_type_id?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * region
   * @description Display name of the game regions.
   *
   * This endpoint mostly contains the localized display name of the a map region. Regions and map regions are interchangeable and governed by the same IDs.
   */
  get_region: {
    parameters: {
      query?: {
        /** @description Unique identifier of a region. */
        region_id?: string;
        /** @description Unique identifier of a zone. */
        zone_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            region_list?: {
                /** @description Defunct field. No longer applicable as warpgates are rotated on zone unlock. */
                initial_faction_id?: string;
                name?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
                /** @description Unique ID of the collection. */
                region_id?: string;
                /** @description ID of the zone in which the region is located. */
                zone_id?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * resist_info
   * @description Lists resistances against certain types of damage.
   */
  get_resist_info: {
    parameters: {
      query?: {
        /** @description Unique identifier of a resist info entry. */
        resist_info_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            resist_info_list?: {
                /** @description Description of the resist info entry. */
                description?: string;
                /** @description Headshot multiplier for this resistance. */
                multiplier_when_headshot?: string;
                /** @description Unique ID of the collection. */
                resist_info_id?: string;
                /** @description Percentage of damage resisted. Negative numbers increase damage. Note that resistances can be greater than 100% to compensate for extra damage from relevant `armor_info` entries. */
                resist_percent?: string;
                /** @description Resist type associated with this resist info entry. */
                resist_type_id?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * resist_type
   * @description Enumeration of resistance types used to balance damage types against various targets.
   */
  get_resist_type: {
    parameters: {
      query?: {
        /** @description Unique identifier of a resist type. */
        resist_type_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            resist_type_list?: {
                /** @description Description of the resist type. */
                description?: string;
                /** @description Unique ID of the collection. */
                resist_type_id?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * resource_type
   * @description Resources consumed by abilities such as the Heavy Overshield.
   */
  get_resource_type: {
    parameters: {
      query?: {
        /** @description Unique identifier of a resource type. */
        resource_type_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            resource_type_list?: {
                /** @description Description of the resource type. */
                description?: string;
                /** @description Unique ID of the collection. */
                resource_type_id?: string;
              }[];
            returned?: number;
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * reward
   * @description A reward granted for completing a directive, mission, or achievement.
   */
  get_reward: {
    parameters: {
      query?: {
        /** @description Unique identifier of a reward. */
        reward_id?: string;
        /** @description Unique identifier of a reward type. */
        reward_type_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            returned?: number;
            reward_list?: {
                /** @description Maximum number of items rewarded. */
                count_max?: string;
                /** @description Minimum number of items rewarded. */
                count_min?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/reward_type` for details. */
                param1?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/reward_type` for details. */
                param2?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/reward_type` for details. */
                param3?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/reward_type` for details. */
                param4?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/reward_type` for details. */
                param5?: string;
                /** @description Unique ID of the collection. */
                reward_id?: string;
                /** @description Reward type associated with this reward. */
                reward_type_id?: string;
              }[];
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * reward_group_to_reward
   * @description Maps a reward group to one or more rewards.
   *
   * This collection, together with `reward_set_to_reward_group`, allows connecting directive tiers to the rewards they grant upon completion.
   */
  get_reward_group_to_reward: {
    parameters: {
      query?: {
        /** @description Unique identifier of a reward. */
        reward_id?: string;
        /** @description Unique identifier of a reward group. */
        reward_group_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            returned?: number;
            reward_group_to_reward_list?: {
                /** @description Reward group associated with this reward. */
                reward_group_id?: string;
                /** @description Reward associated with this reward group. */
                reward_id?: string;
              }[];
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * reward_set_to_reward_group
   * @description Maps a reward set to its reward group.
   *
   * This collection, together with `reward_group_to_reward`, allows connecting directive tiers to the rewards they grant upon completion.
   */
  get_reward_set_to_reward_group: {
    parameters: {
      query?: {
        /** @description Unique identifier of a reward set. */
        reward_set_id?: string;
        /** @description Unique identifier of a reward group. */
        reward_group_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            returned?: number;
            reward_set_to_reward_group_list?: {
                /** @description Reward group associated with this reward set. */
                reward_group_id?: string;
                /** @description Reward set associated with this reward group. */
                reward_set_id?: string;
              }[];
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * reward_type
   * @description A type of reward.
   *
   * The generic `paramX` fields are documented here. Note that not all fields are used by all reward types, or at all.
   */
  get_reward_type: {
    parameters: {
      query?: {
        /** @description Unique identifier of a reward type. */
        reward_type_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            returned?: number;
            reward_type_list?: {
                /** @description Documentation for this parameter on rewards of this type. */
                count_max?: string;
                /** @description Documentation for this parameter on rewards of this type. */
                count_min?: string;
                /** @description Description of the reward type. */
                description?: string;
                /** @description Documentation for this numeric parameter on rewards of this type. */
                param1?: string;
                /** @description Documentation for this numeric parameter on rewards of this type. */
                param2?: string;
                /** @description Documentation for this numeric parameter on rewards of this type. */
                param3?: string;
                /** @description Documentation for this numeric parameter on rewards of this type. */
                param4?: string;
                /** @description Documentation for this numeric parameter on rewards of this type. */
                param5?: string;
                /** @description Unique ID of the collection. */
                reward_type_id?: string;
              }[];
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * single_character_by_id
   * @description Endpoint for retrieving bulk character stats.
   *
   * This endpoint's payload is a superset of `character` and additionally includes data from
   * related `characters_*` collections:
   *
   * - `characters_currency`
   * - `characters_stat_history`
   * - `characters_stat`
   * - `characters_stat_by_faction`
   * - `characters_weapon_stat`
   * - `characters_weapon_stat_by_faction`
   * - `characters_items`
   *
   * This endpoint is generally faster than querying these collections individually, but it
   * comes with significant bandwidth costs. Note that this endpoint does not support most query
   * commands, and that `c:show` and `c:hide` cannot be used to reduce the amount of data
   * returned.
   */
  get_single_character_by_id: {
    parameters: {
      query?: {
        /**
         * @description Unique identifier of a charcter. Note that character IDs are not guaranteed to be unique across games; the same ID may be assigned to different characters for `ps2` than for `ps2ps4us`.
         *
         * When converting this value to native representations, note that a 64 bit integer type is required to avoid truncation.
         */
        character_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            returned?: number;
            single_character_by_id_list?: ({
                /** @description Sub-object providing battle rank information. */
                battle_rank?: {
                  /** @description Progress to the next level-up. */
                  percent_to_next?: string;
                  /** @description Current battle rank. Note that due to the A.S.P. prestige system, this is no longer sufficient to express player level. Always check `prestige_level` as well. */
                  value?: string;
                };
                /** @description Sub-object providing certification point information. */
                certs?: {
                  /** @description Current certification point balance. */
                  available_points?: string;
                  /** @description Certifications earned through experience gain. */
                  earned_points?: string;
                  /** @description Certifications gifted through in-game events or refunds. */
                  gifted_points?: string;
                  /** @description Progress to earning the next certification point (every 250 exp). */
                  percent_to_next?: string;
                  /** @description Certifications points spent on skills and implant bundles. */
                  spent_points?: string;
                };
                /** @description Unique ID of the collection. */
                character_id?: string;
                /** @description Sub-object for daily ribbon bonuses. Note that ribbon bonuses have been disabled, rendering this object useless. It is recommended to treat is as optional in client code in case it ever gets removed from the response object. */
                daily_ribbon?: {
                  /** @description Number of daily ribbon bonuses available for collection. */
                  count?: string;
                  /** @description Human-readable version of `time`. */
                  date?: string;
                  /** @description Next time a daily ribbon bonus will be granted. */
                  time?: string;
                };
                /** @description Faction of the character. For NSOs, this equals the value of NSOs. An NSOs currently or home faction is not exposed on the REST API, but can be determined via the `team_id` of some WebSocket payloads. */
                faction_id?: string;
                /** @description Identifier for the character's in-game model. Note that with gender change tokens, this is no longer guaranteed to be immutable across a character's career. */
                head_id?: string;
                /** @description Name of the character. Use the `first_lower` field for faster case-insensitive searches without needing to set `c:case=false`. */
                name?: {
                  first?: string;
                  first_lower?: string;
                };
                /** @description The A.S.P. rank of the character. */
                prestige_level?: string;
                /** @description Class of the character when the last logged off. This value can generally only be one of the 24 infantry classes available in the legacy `ps2/profile` collection, though other values are possible due to bad data or deleted characters. */
                profile_id?: string;
                /** @description Sub-object providing login time and playtime information. */
                times?: {
                  /** @description Character creation timestamp in UTC. */
                  creation?: string;
                  /** @description Human-readable version of `creation`. */
                  creation_date?: string;
                  /** @description Last time the character logged in. Together with `last_save`, this can be used to construct the duration of the last play session of the character. */
                  last_login?: string;
                  /** @description Human-readable version of `last_login`. */
                  last_login_date?: string;
                  /** @description Last time the character info was updated. This generally corresponds to the last time the character logged off. For this reason, characters are generally not available on the API during their first play session. */
                  last_save?: string;
                  /** @description Human-readable version of `last_save`. */
                  last_save_date?: string;
                  /** @description Number of individual logins by the character. */
                  login_count?: string;
                  /** @description Total playtime in minutes. */
                  minutes_played?: string;
                };
                /** @description Currently selected title of the character. Useful for playing long names of players, e.g. "Snowblower Higby". A title ID of `0` corresponds to a player having selected "No Title" in-game. */
                title_id?: string;
              } & ({
                currency?: {
                  /** @description Unique ID of the currency being returned. */
                  currency_id?: string;
                  /** @description Internal name of the currency being returned. */
                  currency_name?: string;
                  /** @description Number of A.S.P. tokens available to the character. */
                  prestige_currency?: string;
                  /** @description Amount of currency the character owns. */
                  quantity?: string;
                };
                items?: ({
                    /** @description Item side of the relationship. */
                    item_id?: string;
                  } & {
                    /** @description Character side of the relationship. */
                    character_id?: string;
                  })[];
                stats?: {
                  stat?: {
                      /** @description Last time the stat was saved. */
                      last_save?: string;
                      /** @description Human-readable version of `last_save`. */
                      last_save_date?: string;
                      /** @description Class for which stats are being returne. */
                      profile_id?: string;
                      /** @description Name of the stat being returned. */
                      stat_name?: string;
                      /** @description Value of the stat for the last 24 hours. */
                      value_daily?: string;
                      /** @description All-time value of the stat. */
                      value_forever?: string;
                      /** @description Value of the stat for the last 30 days. */
                      value_monthly?: string;
                      /** @description Highest value of the stat in a single life. */
                      value_one_life_max?: string;
                      /** @description Value of the stat for the last 7 days. */
                      value_weekly?: string;
                    }[];
                  stat_by_faction?: {
                      /** @description Last time the stat was saved. */
                      last_save?: string;
                      /** @description Human-readable version of `last_save`. */
                      last_save_date?: string;
                      /** @description Class for which stats are being returne. */
                      profile_id?: string;
                      /** @description Name of the stat being returned. */
                      stat_name?: string;
                      /** @description Value of the stat for the last 24 hours (NC). */
                      value_daily_nc?: string;
                      /** @description Value of the stat for the last 24 hours (TR). */
                      value_daily_tr?: string;
                      /** @description Value of the stat for the last 24 hours (VS). */
                      value_daily_vs?: string;
                      /** @description All-time value of the stat (NC). */
                      value_forever_nc?: string;
                      /** @description All-time value of the stat (TR). */
                      value_forever_tr?: string;
                      /** @description All-time value of the stat (VS). */
                      value_forever_vs?: string;
                      /** @description Value of the stat for the last 30 days (NC). */
                      value_monthly_nc?: string;
                      /** @description Value of the stat for the last 30 days (TR). */
                      value_monthly_tr?: string;
                      /** @description Value of the stat for the last 30 days (VS). */
                      value_monthly_vs?: string;
                      /** @description Highest value of the stat in a single life (NC). */
                      value_one_life_max_nc?: string;
                      /** @description Highest value of the stat in a single life (TR). */
                      value_one_life_max_tr?: string;
                      /** @description Highest value of the stat in a single life (VS). */
                      value_one_life_max_vs?: string;
                      /** @description Value of the stat for the last 7 days (NC). */
                      value_weekly_nc?: string;
                      /** @description Value of the stat for the last 7 days (TR). */
                      value_weekly_tr?: string;
                      /** @description Value of the stat for the last 7 days (VS). */
                      value_weekly_vs?: string;
                    }[];
                  stat_history?: {
                    battle_rank?: {
                      /** @description All-time value of the stat. */
                      all_time?: string;
                      day?: {
                        d01?: string;
                        d02?: string;
                        d03?: string;
                        d04?: string;
                        d05?: string;
                        d06?: string;
                        d07?: string;
                        d08?: string;
                        d09?: string;
                        d10?: string;
                        d11?: string;
                        d12?: string;
                        d13?: string;
                        d14?: string;
                        d15?: string;
                        d16?: string;
                        d17?: string;
                        d18?: string;
                        d19?: string;
                        d20?: string;
                        d21?: string;
                        d22?: string;
                        d23?: string;
                        d24?: string;
                        d25?: string;
                        d26?: string;
                        d27?: string;
                        d28?: string;
                        d29?: string;
                        d30?: string;
                        d31?: string;
                      };
                      /** @description Last time the stat was saved. */
                      last_save?: string;
                      /** @description Human-readable version of `last_save`. */
                      last_save_date?: string;
                      month?: {
                        m01?: string;
                        m02?: string;
                        m03?: string;
                        m04?: string;
                        m05?: string;
                        m06?: string;
                        m07?: string;
                        m08?: string;
                        m09?: string;
                        m10?: string;
                        m11?: string;
                        m12?: string;
                      };
                      /** @description Highest value of the stat in a single life. */
                      one_life_max?: string;
                      week?: {
                        w01?: string;
                        w02?: string;
                        w03?: string;
                        w04?: string;
                        w05?: string;
                      };
                    };
                    certs?: {
                      /** @description All-time value of the stat. */
                      all_time?: string;
                      day?: {
                        d01?: string;
                        d02?: string;
                        d03?: string;
                        d04?: string;
                        d05?: string;
                        d06?: string;
                        d07?: string;
                        d08?: string;
                        d09?: string;
                        d10?: string;
                        d11?: string;
                        d12?: string;
                        d13?: string;
                        d14?: string;
                        d15?: string;
                        d16?: string;
                        d17?: string;
                        d18?: string;
                        d19?: string;
                        d20?: string;
                        d21?: string;
                        d22?: string;
                        d23?: string;
                        d24?: string;
                        d25?: string;
                        d26?: string;
                        d27?: string;
                        d28?: string;
                        d29?: string;
                        d30?: string;
                        d31?: string;
                      };
                      /** @description Last time the stat was saved. */
                      last_save?: string;
                      /** @description Human-readable version of `last_save`. */
                      last_save_date?: string;
                      month?: {
                        m01?: string;
                        m02?: string;
                        m03?: string;
                        m04?: string;
                        m05?: string;
                        m06?: string;
                        m07?: string;
                        m08?: string;
                        m09?: string;
                        m10?: string;
                        m11?: string;
                        m12?: string;
                      };
                      /** @description Highest value of the stat in a single life. */
                      one_life_max?: string;
                      week?: {
                        w01?: string;
                        w02?: string;
                        w03?: string;
                        w04?: string;
                        w05?: string;
                      };
                    };
                    deaths?: {
                      /** @description All-time value of the stat. */
                      all_time?: string;
                      day?: {
                        d01?: string;
                        d02?: string;
                        d03?: string;
                        d04?: string;
                        d05?: string;
                        d06?: string;
                        d07?: string;
                        d08?: string;
                        d09?: string;
                        d10?: string;
                        d11?: string;
                        d12?: string;
                        d13?: string;
                        d14?: string;
                        d15?: string;
                        d16?: string;
                        d17?: string;
                        d18?: string;
                        d19?: string;
                        d20?: string;
                        d21?: string;
                        d22?: string;
                        d23?: string;
                        d24?: string;
                        d25?: string;
                        d26?: string;
                        d27?: string;
                        d28?: string;
                        d29?: string;
                        d30?: string;
                        d31?: string;
                      };
                      /** @description Last time the stat was saved. */
                      last_save?: string;
                      /** @description Human-readable version of `last_save`. */
                      last_save_date?: string;
                      month?: {
                        m01?: string;
                        m02?: string;
                        m03?: string;
                        m04?: string;
                        m05?: string;
                        m06?: string;
                        m07?: string;
                        m08?: string;
                        m09?: string;
                        m10?: string;
                        m11?: string;
                        m12?: string;
                      };
                      /** @description Highest value of the stat in a single life. */
                      one_life_max?: string;
                      week?: {
                        w01?: string;
                        w02?: string;
                        w03?: string;
                        w04?: string;
                        w05?: string;
                      };
                    };
                    facility_capture?: {
                      /** @description All-time value of the stat. */
                      all_time?: string;
                      day?: {
                        d01?: string;
                        d02?: string;
                        d03?: string;
                        d04?: string;
                        d05?: string;
                        d06?: string;
                        d07?: string;
                        d08?: string;
                        d09?: string;
                        d10?: string;
                        d11?: string;
                        d12?: string;
                        d13?: string;
                        d14?: string;
                        d15?: string;
                        d16?: string;
                        d17?: string;
                        d18?: string;
                        d19?: string;
                        d20?: string;
                        d21?: string;
                        d22?: string;
                        d23?: string;
                        d24?: string;
                        d25?: string;
                        d26?: string;
                        d27?: string;
                        d28?: string;
                        d29?: string;
                        d30?: string;
                        d31?: string;
                      };
                      /** @description Last time the stat was saved. */
                      last_save?: string;
                      /** @description Human-readable version of `last_save`. */
                      last_save_date?: string;
                      month?: {
                        m01?: string;
                        m02?: string;
                        m03?: string;
                        m04?: string;
                        m05?: string;
                        m06?: string;
                        m07?: string;
                        m08?: string;
                        m09?: string;
                        m10?: string;
                        m11?: string;
                        m12?: string;
                      };
                      /** @description Highest value of the stat in a single life. */
                      one_life_max?: string;
                      week?: {
                        w01?: string;
                        w02?: string;
                        w03?: string;
                        w04?: string;
                        w05?: string;
                      };
                    };
                    facility_defend?: {
                      /** @description All-time value of the stat. */
                      all_time?: string;
                      day?: {
                        d01?: string;
                        d02?: string;
                        d03?: string;
                        d04?: string;
                        d05?: string;
                        d06?: string;
                        d07?: string;
                        d08?: string;
                        d09?: string;
                        d10?: string;
                        d11?: string;
                        d12?: string;
                        d13?: string;
                        d14?: string;
                        d15?: string;
                        d16?: string;
                        d17?: string;
                        d18?: string;
                        d19?: string;
                        d20?: string;
                        d21?: string;
                        d22?: string;
                        d23?: string;
                        d24?: string;
                        d25?: string;
                        d26?: string;
                        d27?: string;
                        d28?: string;
                        d29?: string;
                        d30?: string;
                        d31?: string;
                      };
                      /** @description Last time the stat was saved. */
                      last_save?: string;
                      /** @description Human-readable version of `last_save`. */
                      last_save_date?: string;
                      month?: {
                        m01?: string;
                        m02?: string;
                        m03?: string;
                        m04?: string;
                        m05?: string;
                        m06?: string;
                        m07?: string;
                        m08?: string;
                        m09?: string;
                        m10?: string;
                        m11?: string;
                        m12?: string;
                      };
                      /** @description Highest value of the stat in a single life. */
                      one_life_max?: string;
                      week?: {
                        w01?: string;
                        w02?: string;
                        w03?: string;
                        w04?: string;
                        w05?: string;
                      };
                    };
                    kills?: {
                      /** @description All-time value of the stat. */
                      all_time?: string;
                      day?: {
                        d01?: string;
                        d02?: string;
                        d03?: string;
                        d04?: string;
                        d05?: string;
                        d06?: string;
                        d07?: string;
                        d08?: string;
                        d09?: string;
                        d10?: string;
                        d11?: string;
                        d12?: string;
                        d13?: string;
                        d14?: string;
                        d15?: string;
                        d16?: string;
                        d17?: string;
                        d18?: string;
                        d19?: string;
                        d20?: string;
                        d21?: string;
                        d22?: string;
                        d23?: string;
                        d24?: string;
                        d25?: string;
                        d26?: string;
                        d27?: string;
                        d28?: string;
                        d29?: string;
                        d30?: string;
                        d31?: string;
                      };
                      /** @description Last time the stat was saved. */
                      last_save?: string;
                      /** @description Human-readable version of `last_save`. */
                      last_save_date?: string;
                      month?: {
                        m01?: string;
                        m02?: string;
                        m03?: string;
                        m04?: string;
                        m05?: string;
                        m06?: string;
                        m07?: string;
                        m08?: string;
                        m09?: string;
                        m10?: string;
                        m11?: string;
                        m12?: string;
                      };
                      /** @description Highest value of the stat in a single life. */
                      one_life_max?: string;
                      week?: {
                        w01?: string;
                        w02?: string;
                        w03?: string;
                        w04?: string;
                        w05?: string;
                      };
                    };
                    medals?: {
                      /** @description All-time value of the stat. */
                      all_time?: string;
                      day?: {
                        d01?: string;
                        d02?: string;
                        d03?: string;
                        d04?: string;
                        d05?: string;
                        d06?: string;
                        d07?: string;
                        d08?: string;
                        d09?: string;
                        d10?: string;
                        d11?: string;
                        d12?: string;
                        d13?: string;
                        d14?: string;
                        d15?: string;
                        d16?: string;
                        d17?: string;
                        d18?: string;
                        d19?: string;
                        d20?: string;
                        d21?: string;
                        d22?: string;
                        d23?: string;
                        d24?: string;
                        d25?: string;
                        d26?: string;
                        d27?: string;
                        d28?: string;
                        d29?: string;
                        d30?: string;
                        d31?: string;
                      };
                      /** @description Last time the stat was saved. */
                      last_save?: string;
                      /** @description Human-readable version of `last_save`. */
                      last_save_date?: string;
                      month?: {
                        m01?: string;
                        m02?: string;
                        m03?: string;
                        m04?: string;
                        m05?: string;
                        m06?: string;
                        m07?: string;
                        m08?: string;
                        m09?: string;
                        m10?: string;
                        m11?: string;
                        m12?: string;
                      };
                      /** @description Highest value of the stat in a single life. */
                      one_life_max?: string;
                      week?: {
                        w01?: string;
                        w02?: string;
                        w03?: string;
                        w04?: string;
                        w05?: string;
                      };
                    };
                    ribbons?: {
                      /** @description All-time value of the stat. */
                      all_time?: string;
                      day?: {
                        d01?: string;
                        d02?: string;
                        d03?: string;
                        d04?: string;
                        d05?: string;
                        d06?: string;
                        d07?: string;
                        d08?: string;
                        d09?: string;
                        d10?: string;
                        d11?: string;
                        d12?: string;
                        d13?: string;
                        d14?: string;
                        d15?: string;
                        d16?: string;
                        d17?: string;
                        d18?: string;
                        d19?: string;
                        d20?: string;
                        d21?: string;
                        d22?: string;
                        d23?: string;
                        d24?: string;
                        d25?: string;
                        d26?: string;
                        d27?: string;
                        d28?: string;
                        d29?: string;
                        d30?: string;
                        d31?: string;
                      };
                      /** @description Last time the stat was saved. */
                      last_save?: string;
                      /** @description Human-readable version of `last_save`. */
                      last_save_date?: string;
                      month?: {
                        m01?: string;
                        m02?: string;
                        m03?: string;
                        m04?: string;
                        m05?: string;
                        m06?: string;
                        m07?: string;
                        m08?: string;
                        m09?: string;
                        m10?: string;
                        m11?: string;
                        m12?: string;
                      };
                      /** @description Highest value of the stat in a single life. */
                      one_life_max?: string;
                      week?: {
                        w01?: string;
                        w02?: string;
                        w03?: string;
                        w04?: string;
                        w05?: string;
                      };
                    };
                    score?: {
                      /** @description All-time value of the stat. */
                      all_time?: string;
                      day?: {
                        d01?: string;
                        d02?: string;
                        d03?: string;
                        d04?: string;
                        d05?: string;
                        d06?: string;
                        d07?: string;
                        d08?: string;
                        d09?: string;
                        d10?: string;
                        d11?: string;
                        d12?: string;
                        d13?: string;
                        d14?: string;
                        d15?: string;
                        d16?: string;
                        d17?: string;
                        d18?: string;
                        d19?: string;
                        d20?: string;
                        d21?: string;
                        d22?: string;
                        d23?: string;
                        d24?: string;
                        d25?: string;
                        d26?: string;
                        d27?: string;
                        d28?: string;
                        d29?: string;
                        d30?: string;
                        d31?: string;
                      };
                      /** @description Last time the stat was saved. */
                      last_save?: string;
                      /** @description Human-readable version of `last_save`. */
                      last_save_date?: string;
                      month?: {
                        m01?: string;
                        m02?: string;
                        m03?: string;
                        m04?: string;
                        m05?: string;
                        m06?: string;
                        m07?: string;
                        m08?: string;
                        m09?: string;
                        m10?: string;
                        m11?: string;
                        m12?: string;
                      };
                      /** @description Highest value of the stat in a single life. */
                      one_life_max?: string;
                      week?: {
                        w01?: string;
                        w02?: string;
                        w03?: string;
                        w04?: string;
                        w05?: string;
                      };
                    };
                    time?: {
                      /** @description All-time value of the stat. */
                      all_time?: string;
                      day?: {
                        d01?: string;
                        d02?: string;
                        d03?: string;
                        d04?: string;
                        d05?: string;
                        d06?: string;
                        d07?: string;
                        d08?: string;
                        d09?: string;
                        d10?: string;
                        d11?: string;
                        d12?: string;
                        d13?: string;
                        d14?: string;
                        d15?: string;
                        d16?: string;
                        d17?: string;
                        d18?: string;
                        d19?: string;
                        d20?: string;
                        d21?: string;
                        d22?: string;
                        d23?: string;
                        d24?: string;
                        d25?: string;
                        d26?: string;
                        d27?: string;
                        d28?: string;
                        d29?: string;
                        d30?: string;
                        d31?: string;
                      };
                      /** @description Last time the stat was saved. */
                      last_save?: string;
                      /** @description Human-readable version of `last_save`. */
                      last_save_date?: string;
                      month?: {
                        m01?: string;
                        m02?: string;
                        m03?: string;
                        m04?: string;
                        m05?: string;
                        m06?: string;
                        m07?: string;
                        m08?: string;
                        m09?: string;
                        m10?: string;
                        m11?: string;
                        m12?: string;
                      };
                      /** @description Highest value of the stat in a single life. */
                      one_life_max?: string;
                      week?: {
                        w01?: string;
                        w02?: string;
                        w03?: string;
                        w04?: string;
                        w05?: string;
                      };
                    };
                  };
                  weapon_stat?: {
                      /** @description The ID of the item. */
                      item_id?: string;
                      /** @description Last time the stat was saved. */
                      last_save?: string;
                      /** @description Human-readable version of `last_save`. */
                      last_save_date?: string;
                      /** @description The name of the stat being recorded. */
                      stat_name?: string;
                      /** @description The all-time value of the given stat. */
                      value?: string;
                      /** @description The ID of the vehicle. */
                      vehicle_id?: string;
                    }[];
                  weapon_stat_by_faction?: {
                      /** @description The ID of the item. */
                      item_id?: string;
                      /** @description Last time the stat was saved. */
                      last_save?: string;
                      /** @description Human-readable version of `last_save`. */
                      last_save_date?: string;
                      /** @description The name of the stat being recorded. */
                      stat_name?: string;
                      /** @description The all-time value of the given stat for the NC faction. */
                      value_nc?: string;
                      /** @description The all-time value of the given stat for the TR faction. */
                      value_tr?: string;
                      /** @description The all-time value of the given stat for the VS faction. */
                      value_vs?: string;
                      /** @description The ID of the vehicle. */
                      vehicle_id?: string;
                    }[];
                };
              }))[];
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * skill
   * @description Purchasable skills, such as certifications and A.S.P. skills.
   */
  get_skill: {
    parameters: {
      query?: {
        /** @description Unique identifier of a skill. */
        skill_id?: string;
        /** @description Unique identifier of a skill line. */
        skill_line_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            returned?: number;
            skill_list?: {
                description?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
                /** @description Item granted by this skill. The skill must be unlocked for the item to be available in the player's loadouts. */
                grant_item_id?: string;
                /** @description Image associated with this skill. */
                image_id?: string;
                /** @description Path to the image associated with this skill. */
                image_path?: string;
                /** @description Image set associated with this skill. */
                image_set_id?: string;
                name?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
                /** @description Unique ID of the collection. */
                skill_id?: string;
                /** @description Skill line containing this skill. */
                skill_line_id?: string;
                /** @description Position of this skill for upgradable skill lines such as Ammo Capacity. */
                skill_line_index?: string;
                /** @description Number of skill points (Certs or A.S.P. tokens) required to unlock this skill. */
                skill_points?: string;
              }[];
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * skill_category
   * @description Skill categories represent a grouping of skills.
   *
   * They usually group skills by the loadout slots for which they provide items, such as "Passive Systems" or "Ability Slot". On weapons, they generally represent a given attachment slot.
   */
  get_skill_category: {
    parameters: {
      query?: {
        /** @description Unique identifier of a skill category. */
        skill_category_id?: string;
        /** @description Unique identifier of a skill set. */
        skill_set_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            returned?: number;
            skill_category_list?: {
                description?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
                /** @description Image associated with this skill category. */
                image_id?: string;
                /** @description Path to the image associated with this skill category. */
                image_path?: string;
                /** @description Image set associated with this skill category. */
                image_set_id?: string;
                name?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
                /** @description Unique ID of the collection. */
                skill_category_id?: string;
                /** @description Unused. */
                skill_points?: string;
                /** @description Skill set containing this skill category. */
                skill_set_id?: string;
                /** @description Position of this skill category within its skill set. */
                skill_set_index?: string;
              }[];
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * skill_line
   * @description Skill lines represent upgrade paths for skills, such as Ammo Capacity.
   */
  get_skill_line: {
    parameters: {
      query?: {
        /** @description Unique identifier of a skill line. */
        skill_line_id?: string;
        /** @description Unique identifier of a skill category. */
        skill_category_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            returned?: number;
            skill_line_list?: {
                description?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
                /** @description Image associated with this skill line. */
                image_id?: string;
                /** @description Path to the image associated with this skill line. */
                image_path?: string;
                /** @description Image set associated with this skill line. */
                image_set_id?: string;
                name?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
                /** @description Skill category containing this skill line. */
                skill_category_id?: string;
                /** @description Position of this skill line within its skill category. */
                skill_category_index?: string;
                /** @description Unique ID of the collection. */
                skill_line_id?: string;
                /** @description Unused. */
                skill_points?: string;
              }[];
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * skill_set
   * @description Skill sets represent the top-level grouping of skills.
   *
   * In the old certification menu, this would group weapon-related skill lines into a sub-tree beneath the weapon itself.
   */
  get_skill_set: {
    parameters: {
      query?: {
        /** @description Unique identifier of a skill set. */
        skill_set_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            returned?: number;
            skill_set_list?: {
                description?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
                /** @description Image associated with this skill set. */
                image_id?: string;
                /** @description Path to the image associated with this skill set. */
                image_path?: string;
                /** @description Image set associated with this skill set. */
                image_set_id?: string;
                name?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
                /** @description The item associated with this skill set. Contained skill lines are only available once this item has been unlocked. */
                required_item_id?: string;
                /** @description Unlock cost of the skill set. For weapon skill sets, this is equal to the certification cost of the weapon item. */
                skill_points?: string;
                /** @description Unique ID of the collection. */
                skill_set_id?: string;
              }[];
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * target_type
   * @description Enumerates the target types used to categorize the applicable targets of a weapon or effect.
   *
   * This is effectively a constant mapping and can be cached aggressively.
   */
  get_target_type: {
    parameters: {
      query?: {
        /** @description Unique identifier of a target type. */
        target_type_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            returned?: number;
            target_type_list?: {
                /** @description Description of the target type. */
                description?: string;
                /** @description Unique ID of the collection. */
                target_type_id?: string;
              }[];
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * title
   * @description Selectable titles for a character.
   *
   * Note that title IDs of 0 signify no title being selected.
   */
  get_title: {
    parameters: {
      query?: {
        /** @description Unique identifier of a character title. */
        title_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            returned?: number;
            title_list?: {
                name?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
                /** @description Unique ID of the collection. */
                title_id?: string;
              }[];
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * vehicle
   * @description Basic vehicle information such as name, description, and type.
   *
   * Note that vehicle types are only used internally and are not directly tied to damage mechanics or resistances. Liberators and Galaxies are still considered "Light Aircraft" in this endpoint.
   */
  get_vehicle: {
    parameters: {
      query?: {
        /** @description Unique identifier of a vehicle. */
        vehicle_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            returned?: number;
            vehicle_list?: {
                /** @description Defunct field. Does not reflect the actual resource cost of the vehicle. */
                cost?: string;
                /** @description ID of the currency used to purchase the vehicle. */
                cost_resource_id?: string;
                description?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
                /** @description ID of the default image for the vehicle icon. */
                image_id?: string;
                /** @description Path to the default image for the vehicle icon. */
                image_path?: string;
                /** @description ID of the image set for the vehicle icon. */
                image_set_id?: string;
                name?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
                /** @description ID of the vehicle type. Note that vehicle types are not related to damage types; Liberators still qualify as "Light Aircraft". */
                type_id?: string;
                /** @description Internal name of the vehicle type. Note that vehicle types are not related to damage types; Liberators still qualify as "Light Aircraft". */
                type_name?: string;
                /** @description Unique ID of the collection. */
                vehicle_id?: string;
              }[];
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * vehicle_attachment
   * @description Maps items to the vehicles and factions that have access to them.
   *
   * The `slot_id` field is used to identify where the item is attached to. The below list shows
   * the types of items for each slot as of June 2023:
   *
   * ```
   * ID   Description
   *
   * 1    Primary Weapon
   * 2    Secondary Weapon
   * 3    Ability Slot
   * 4    Defensive Slot
   * 5    Chassis / Airframe
   * 6    Cockpit / Hood Ornament
   * 7    Camo
   * 8    Decal
   * 9    Exterior
   * 10   Weapon Slot / Catapult
   * 11   Weapon Slot / Catapult
   * 12   Afterburner / Nitrous
   * 13   (Unused)
   * 14   (Internal: Headlights)
   * 15   Horn
   * 16   Trim
   * 17   Lighting
   * 18   Hubcaps
   * 19   Other
   * 20   Tire Traits / Catapult
   * 21   Catapult
   * 22   Catapult
   * ```
   *
   * Note that this list is maintained manually and may be out of date. The slot associations
   * are not available on the API.
   */
  get_vehicle_attachment: {
    parameters: {
      query?: {
        /** @description Unique identifier of a vehicle. */
        vehicle_id?: string;
        /** @description Unique identifier of a faction. */
        faction_id?: string;
        /** @description Unique identifier of an item. */
        item_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            returned?: number;
            vehicle_attachment_list?: {
                /** @description Internal description of the vehicle/faction combination. */
                description?: string;
                /** @description ID of the faction that can use the attachment. */
                faction_id?: string;
                /** @description Unique ID of the attachment item. */
                item_id?: string;
                /** @description ID of the slot the attachment occupies. See the `ps2/vehicle_attachment` endpoint documentation for a mapping of slot IDs to item types. */
                slot_id?: string;
                /** @description Unique ID of the vehicle. */
                vehicle_id?: string;
              }[];
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * vehicle_faction
   * @description Maps vehicles to the factions that have access to them.
   */
  get_vehicle_faction: {
    parameters: {
      query?: {
        /** @description Unique identifier of a vehicle. */
        vehicle_id?: string;
        /** @description Unique identifier of a faction. */
        faction_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            returned?: number;
            vehicle_faction_list?: {
                /** @description ID of the faction that can use the vehicle. */
                faction_id?: string;
                /** @description Unique ID of the vehicle. */
                vehicle_id?: string;
              }[];
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * vehicle_skill_set
   * @description Maps vehicles to the skill sets that they use.
   *
   * Note that this relationship is expressed for each faction separetly.
   */
  get_vehicle_skill_set: {
    parameters: {
      query?: {
        /** @description Unique identifier of a vehicle. */
        vehicle_id?: string;
        /** @description Unique identifier of a skill set. */
        skill_set_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            returned?: number;
            vehicle_skill_set_list?: {
                /** @description Index used to sort the skill sets in the vehicle's UI. */
                display_index?: string;
                /** @description ID of the faction that can use the skill set. */
                faction_id?: string;
                /** @description Skill set side of the relationship. */
                skill_set_id?: string;
                /** @description Vehicle side of the relationship. */
                vehicle_id?: string;
              }[];
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * weapon
   * @description Baseline weapon data, such as equip times, stock sights, and movement speed modifiers.
   */
  get_weapon: {
    parameters: {
      query?: {
        /** @description Unique identifier of a weapon. */
        weapon_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            returned?: number;
            weapon_list?: {
                /** @description The time in milliseconds it takes to equip the weapon. */
                equip_ms?: string;
                /** @description Transition duration when exiting aim-down-sights in milliseconds. */
                from_iron_sights_ms?: string;
                /** @description Rate at which heat is dissipated when not firing. Note that this value is represented as an integer on the API despite being a float internally. */
                heat_bleed_off_rate?: string;
                /** @description Total capacity for heat-based weapons. This is comparable to the magazine size of regular weapons. */
                heat_capacity?: string;
                /** @description The time in milliseconds it takes for the weapon to start cooling down after overheating. */
                heat_overheat_penalty_ms?: string;
                /** @description On melee weapons, designates the height of the quick knife attack hitbox. */
                melee_detect_height?: string;
                /** @description On melee weapons, designates the width of the quick knife attack hitbox. */
                melee_detect_width?: string;
                /** @description The modifier applied to the movement speed when the weapon is equipped. */
                move_modifier?: string;
                /** @description Whether equipping this weapon requires ammunition to be available. Used for grenades or the medic's shield regen device to prevent selection when out of ammo. */
                requires_ammo?: string;
                /** @description Time after sprinting during which the cone-of-fire will retain its sprinting value before starting to recover. */
                sprint_recovery_ms?: string;
                /** @description Transition duration when entering aim-down-sights in milliseconds. */
                to_iron_sights_ms?: string;
                /** @description The modifier applied to the turn speed when the weapon is equipped. */
                turn_modifier?: string;
                /** @description The time in milliseconds it takes to unequip the weapon. */
                unequip_ms?: string;
                /** @description Time in milliseconds between uses of this weapon. */
                use_cooldown_ms?: string;
                /**
                 * @description ID of the weapon's group. Weapons in the same group are treated as a single weapon despite having distinct items. Examples include upgradable pseudo-weapons such as the medic or engineer tool, or the Infiltrator's Recon dart gun.
                 *
                 * Note that not all weapons have weapon groups, and that most weapon groups have only one weapon in them. The presence of this field has no bearing on the weapon being grouped or not.
                 */
                weapon_group_id?: string;
                /** @description Unique ID of the collection. */
                weapon_id?: string;
              }[];
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * weapon_ammo_slot
   * @description Ammo slot data for a given weapon, including the clip size, reserve ammo capacity, and resupply behaviour.
   */
  get_weapon_ammo_slot: {
    parameters: {
      query?: {
        /** @description Unique identifier of a weapon. */
        weapon_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            returned?: number;
            weapon_ammo_slot_list?: {
                /** @description Reserve ammunition capacity of this ammo slot. */
                capacity?: string;
                /** @description The number of bullets in a single clip of this ammo slot. */
                clip_size?: string;
                /** @description Extra cooldown between ammo resupply ticks. The base ammo resupply tick rate is not available on the API. */
                refill_ammo_delay_ms?: string;
                /** @description Number of bullets refilled per ammo resupply tick. */
                refill_ammo_rate?: string;
                /** @description ID of the weapon to which this ammo slot belongs. */
                weapon_id?: string;
                /** @description Index of the slot in the weapon's ammo slot list. */
                weapon_slot_index?: string;
              }[];
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * weapon_datasheet (Deprecated)
   * @description **Deprecated:** This table is not directly tied to the underlying fire mode and player state group data and may differ wildly from the true values!
   *
   * Suggested alternatives for the values provided by this collection are listed as part of the `weapon_datasheet` schema.
   */
  get_weapon_datasheet: {
    parameters: {
      query?: {
        /** @description Unique identifier of an item. */
        item_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            returned?: number;
            weapon_datasheet_list?: {
                /** @description Unreliable! Please refer to the matching `ps2/weapon_ammo_slot` instead. */
                capacity?: string;
                /** @description Unreliable! Please refer to the matching `ps2/weapon_ammo_slot` instead. */
                clip_size?: string;
                /** @description Unreliable! Please use the values from `ps2/fire_mode_2` instead. */
                damage?: string;
                /** @description Unreliable! Please use the values from `ps2/fire_mode_2` instead. */
                damage_max?: string;
                /** @description Unreliable! Please use the values from `ps2/fire_mode_2` instead. */
                damage_min?: string;
                /** @description Unreliable! Please refer to the damage effect listed in `ps2/fire_mode_2.damage_direct_effect_id` instead. */
                direct_damage?: string;
                /** @description Unreliable! Please refer to the player state group listed in `ps2/fire_mode_2.player_state_group_id` instead. */
                fire_cone?: string;
                /** @description Unreliable! Please refer to the `cof_` values in `ps2/fire_mode_2` instead. */
                fire_cone_max?: string;
                /** @description Unreliable! Please refer to the player state group listed in `ps2/fire_mode_2.player_state_group_id` instead. */
                fire_cone_min?: string;
                /** @description Unreliable! Please use `ps2/fire_mode_2.fire_refire_ms` instead. */
                fire_rate_ms?: string;
                /** @description Unreliable! Please use `ps2/fire_mode_2.fire_refire_ms` instead. Note that this is not a typo in the spec, the field is named `mx`. */
                fire_rate_mx_max?: string;
                /** @description Unreliable! Please use `ps2/fire_mode_2.fire_refire_ms` instead. */
                fire_rate_ms_min?: string;
                /** @description Unreliable! Please refer to the damage effect listed in `ps2/fire_mode_2.damage_indirect_effect_id` instead. */
                indirect_damage?: string;
                /** @description ID of the item to which this datasheet belongs. */
                item_id?: string;
                range?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
                /** @description Unreliable! Please add the values of `ps2/fire_mode_2.reload_time_ms` instead. */
                reload_ms?: string;
                /** @description Unreliable! Please add the values of `ps2/fire_mode_2.reload_time_ms` and `ps2/fire_mode_2.reload_chamber_ms` together to get long reload time. */
                reload_ms_max?: string;
                /** @description Unreliable! Please add the values of `ps2/fire_mode_2.reload_time_ms` instead. */
                reload_ms_min?: string;
                /** @description Whether the clip size should be displayed in the UI. */
                show_clip_size?: string;
                /** @description Whether the fire modes (in-game interpretation of this term) should be displayed in the UI. */
                show_fire_modes?: string;
                /** @description Whether the range string should be displayed in the UI. */
                show_range?: string;
              }[];
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * weapon_to_attachment
   * @description Maps weapons to the attachments available to them. This table is largely synonymous with `item_attachment`, but contains additional entries that may not resolve to a valid item.
   *
   * For this reason, it is recommended to base any attachment queries on the `item_attachment` endpoint instead.
   */
  get_weapon_to_attachment: {
    parameters: {
      query?: {
        /** @description Unique identifier of an item. */
        item_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            returned?: number;
            weapon_to_attachment_list?: {
                /** @description Internal ID of this mapping. Does not map to any other field in the API. */
                attachment_id?: string;
                /** @description Unique ID of the attachment item. */
                item_id?: string;
                /** @description ID of the weapon group to which this item can be attached. */
                weapon_group_id?: string;
              }[];
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * weapon_to_fire_group
   * @description Maps weapons to their set of fire groups. The `fire_group_index` field matches the in-game fire mode selection; hitting 'B' in-game is equivalent to incrementing the index by 1.
   */
  get_weapon_to_fire_group: {
    parameters: {
      query?: {
        /** @description Unique identifier of a weapon. */
        weapon_id?: string;
        /** @description Unique identifier of a fire group. */
        fire_group_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            returned?: number;
            weapon_to_fire_group_list?: {
                /** @description Unique ID of the fire group. */
                fire_group_id?: string;
                /** @description Index of the fire group in the weapon's fire group list. */
                fire_group_index?: string;
                /** @description Unique ID of the weapon. */
                weapon_id?: string;
              }[];
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * world
   * @description A game server for a given region and game.
   */
  get_world: {
    parameters: {
      query?: {
        /** @description Unique identifier of a world. */
        world_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            returned?: number;
            world_list?: ({
                description?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
                name?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
                /**
                 * @description Current availability of the game server.
                 * @enum {string}
                 */
                state?: "online" | "locked";
                /** @description Unique ID of the collection. */
                world_id?: string;
              })[];
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * world_event
   * @description ReST endpoint for retrieving historical world events.
   *
   * The `world_id` and `id` fields are interchangeable.
   */
  get_world_event: {
    parameters: {
      query?: {
        /** @description Unique identifier of a world. */
        world_id?: string;
        /** @description Alias for `world_id`. */
        id?: string;
        /** @description Event name for the `world_event` collection. */
        type?: "FACILITYCONTROL" | "METAGAME";
        /** @description Only return results older than the given UTC timestamp. */
        before?: string;
        /** @description Only return results newer than the given UTC timestamp. */
        after?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            returned?: number;
            world_event_list?: (({
                /** @description The ID of the character that ranked up. */
                character_id?: string;
                /** @description Internal name of the table. */
                table_type?: string;
                /** @description UTC timestamp of the event. */
                timestamp?: string;
                /** @description The ID of the world where the character ranked up. */
                world_id?: string;
                /** @description The ID of the zone where the character ranked up. */
                zone_id?: string;
              } & {
                /** @description Time in seconds since the facility was held by the previous owner. */
                duration_held?: string;
                /** @description Type of event. This generally matches the event types used by the ESS. */
                event_type?: string;
                /** @description The ID of the facility that was captured. */
                facility_id?: string;
                /** @description The faction that owns the facility after the capture. */
                faction_new?: string;
                /** @description The faction that owned the facility before the capture. */
                faction_old?: string;
                /** @description Unknown. */
                objective_id?: string;
                /** @description Unique ID of the outfit that captured the facility. */
                outfit_id?: string;
              }) | ({
                /** @description The ID of the character that ranked up. */
                character_id?: string;
                /** @description Internal name of the table. */
                table_type?: string;
                /** @description UTC timestamp of the event. */
                timestamp?: string;
                /** @description The ID of the world where the character ranked up. */
                world_id?: string;
                /** @description The ID of the zone where the character ranked up. */
                zone_id?: string;
              } & {
                /** @description Type of event. This generally matches the event types used by the ESS. */
                event_type?: string;
                /** @description Experience bonus for the winning faction. */
                experience_bonus?: string;
                /** @description Current scope of the NC faction. */
                faction_nc?: string;
                /** @description Current scope of the TR faction. */
                faction_tr?: string;
                /** @description Current scope of the VS faction. */
                faction_vs?: string;
                /** @description Unique ID of this particular instance of the metagame event. Only unique per server restart, not globally. */
                instance_id?: string;
                /** @description Unique ID of the metagame event. */
                metagame_event_id?: string;
                /** @description Unique ID of the metagame event state. */
                metagame_event_state?: string;
                /** @description Name of the metagame event state. */
                metagame_event_state_name?: string;
              }))[];
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * world_stat_history (Defunct)
   * @description Historical data for a given global event.
   */
  get_world_stat_history: {
    parameters: {
      query?: {
        /** @description Unique identifier of a world. */
        world_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            returned?: number;
            world_stat_history_list?: {
                /** @description Total value of the stat for the given world, tracker and faction. */
                all_time?: string;
                day?: {
                  d01?: string;
                  d02?: string;
                  d03?: string;
                  d04?: string;
                  d05?: string;
                  d06?: string;
                  d07?: string;
                  d08?: string;
                  d09?: string;
                  d10?: string;
                  d11?: string;
                  d12?: string;
                  d13?: string;
                  d14?: string;
                  d15?: string;
                  d16?: string;
                  d17?: string;
                  d18?: string;
                  d19?: string;
                  d20?: string;
                  d21?: string;
                  d22?: string;
                  d23?: string;
                  d24?: string;
                  d25?: string;
                  d26?: string;
                  d27?: string;
                  d28?: string;
                  d29?: string;
                  d30?: string;
                  d31?: string;
                };
                /** @description Code for the faction for which the data is returned. */
                faction?: string;
                /** @description UTC timestamp of when the tracker was last updated. */
                last_save?: string;
                /** @description Human-readable version of `last_save`. */
                last_save_date?: string;
                month?: {
                  m01?: string;
                  m02?: string;
                  m03?: string;
                  m04?: string;
                  m05?: string;
                  m06?: string;
                  m07?: string;
                  m08?: string;
                  m09?: string;
                  m10?: string;
                  m11?: string;
                  m12?: string;
                };
                /** @description Name of the stat for which the data is returned. */
                stat_name?: string;
                /** @description Name of the tracker for which the data is returned. */
                tracker_name?: string;
                /** @description Type of the tracker for which the data is returned. */
                type?: string;
                week?: {
                  w01?: string;
                  w02?: string;
                  w03?: string;
                  w04?: string;
                  w05?: string;
                  w06?: string;
                  w07?: string;
                  w08?: string;
                  w09?: string;
                  w10?: string;
                  w11?: string;
                  w12?: string;
                  w13?: string;
                };
                /** @description Unique ID of the world for which the data is returned. */
                world_id?: string;
              }[];
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * zone
   * @description World continent and dynamic zone information.
   */
  get_zone: {
    parameters: {
      query?: {
        /** @description Unique identifier of a zone. */
        zone_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            returned?: number;
            zone_list?: {
                /** @description Internal code of the zone. Used to connect map textures to the zone. */
                code?: string;
                description?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
                /** @description Whether this zone is dynamic or not. Multiple dynamic zones of the same `geometry_id` may exist for a given `ps2/world`, such as Sanctuary instances or Outfit Wars rooms. */
                dynamic?: string;
                /** @description Internal geometry ID of the zones with dynamic IDs. Prior to this field being added, this ID was referred to as `definition_id` by community developers. */
                geometry_id?: string;
                /** @description Radius of a map hex in metres. */
                hex_size?: string;
                name?: {
                  /** @description German locale */
                  de?: string;
                  /** @description English locale */
                  en?: string;
                  /** @description Spanish locale */
                  es?: string;
                  /** @description French locale */
                  fr?: string;
                  /** @description Italian locale */
                  it?: string;
                  /** @description Turkish locale, unfinished and not available for most fields */
                  tr?: string;
                };
                /** @description Unique ID of the collection. */
                zone_id?: string;
              }[];
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * zone_effect
   * @description Passive effects such as weapon stat modifications from attachments or equipped skills.
   *
   * For weapon damage effects, see `effect` instead. See the `zone_effect_type` collection for a list of available zone effect types.
   */
  get_zone_effect: {
    parameters: {
      query?: {
        /** @description Unique ID of a zone effect. */
        zone_effect_id?: string;
        /** @description Unique ID of a zone  type. */
        zone_effect_type_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            returned?: number;
            zone_effect_list?: {
                /** @description Unique ID of the associated ability. */
                ability_id?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/zone_effect_type` for details. */
                param1?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/zone_effect_type` for details. */
                param10?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/zone_effect_type` for details. */
                param11?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/zone_effect_type` for details. */
                param12?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/zone_effect_type` for details. */
                param13?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/zone_effect_type` for details. */
                param14?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/zone_effect_type` for details. */
                param2?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/zone_effect_type` for details. */
                param3?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/zone_effect_type` for details. */
                param4?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/zone_effect_type` for details. */
                param5?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/zone_effect_type` for details. */
                param6?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/zone_effect_type` for details. */
                param7?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/zone_effect_type` for details. */
                param8?: string;
                /** @description Generic numeric parameter. See the corresponding `ps2/zone_effect_type` for details. */
                param9?: string;
                /** @description Generic string field. See the corresponding `ps2/zone_effect_type` for details. */
                string1?: string;
                /** @description Generic string field. See the corresponding `ps2/zone_effect_type` for details. */
                string2?: string;
                /** @description Generic string field. See the corresponding `ps2/zone_effect_type` for details. */
                string3?: string;
                /** @description Generic string field. See the corresponding `ps2/zone_effect_type` for details. */
                string4?: string;
                /** @description Unique ID of the collection. */
                zone_effect_id?: string;
                /** @description Unique ID of the zone effect type. */
                zone_effect_type_id?: string;
              }[];
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * zone_effect_type
   * @description A type of zone effect.
   *
   * The generic fields `paramX` and `stringX` are documented here. Note that not all fields are used by all zone effect types, or at all.
   */
  get_zone_effect_type: {
    parameters: {
      query?: {
        /** @description Unique ID of a zone  type. */
        zone_effect_type_id?: string;
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            returned?: number;
            zone_effect_type_list?: {
                /** @description Description of the zone effect type. */
                description?: string;
                /** @description Documentation for this numeric parameter on zone effects of this type. */
                param1?: string;
                /** @description Documentation for this numeric parameter on zone effects of this type. */
                param10?: string;
                /** @description Documentation for this numeric parameter on zone effects of this type. */
                param11?: string;
                /** @description Documentation for this numeric parameter on zone effects of this type. */
                param12?: string;
                /** @description Documentation for this numeric parameter on zone effects of this type. */
                param13?: string;
                /** @description Documentation for this numeric parameter on zone effects of this type. */
                param14?: string;
                /** @description Documentation for this numeric parameter on zone effects of this type. */
                param2?: string;
                /** @description Documentation for this numeric parameter on zone effects of this type. */
                param3?: string;
                /** @description Documentation for this numeric parameter on zone effects of this type. */
                param4?: string;
                /** @description Documentation for this numeric parameter on zone effects of this type. */
                param5?: string;
                /** @description Documentation for this numeric parameter on zone effects of this type. */
                param6?: string;
                /** @description Documentation for this numeric parameter on zone effects of this type. */
                param7?: string;
                /** @description Documentation for this numeric parameter on zone effects of this type. */
                param8?: string;
                /** @description Documentation for this numeric parameter on zone effects of this type. */
                param9?: string;
                /** @description Documentation for this string parameter on zone effects of this type. */
                string1?: string;
                /** @description Documentation for this string parameter on zone effects of this type. */
                string2?: string;
                /** @description Documentation for this string parameter on zone effects of this type. */
                string3?: string;
                /** @description Documentation for this string parameter on zone effects of this type. */
                string4?: string;
                /** @description Unique ID of the collection. */
                zone_effect_type_id?: string;
              }[];
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
  /**
   * /get/{game}/{collection}
   * @description This endpoint documents generic parameters available on most collections.
   *
   * For details on collection-specific variables and response schemas, please see the respective collection's query entry.
   */
  get_generic: {
    parameters: {
      query?: {
        /** @description If set, only the response keys listed will be included in the response object. Overrides `c:hide`. Multiple fields can be comma-separated. Dot-notation is supported to select sub-keys. */
        "c:show"?: string;
        /** @description If set, the given response fields will be excluded from the response. If `c:show` is also set, this parameter will be ignored. Multiple fields can be comma-separated. Dot-notation is supported to select sub-keys. */
        "c:hide"?: string;
        /** @description Allows sorting the results by one or more fields. Multiple fields can be comma-separated. The sorting direction can be specified by appending `:1` (ascending, default) or `:-1` (descending). */
        "c:sort"?: string;
        /** @description Filters results by entries with non-NULL values in the given fields. Multiple fields can be comma-separated. */
        "c:has"?: string;
        /** @description Include additional fields in the response. See the `resolve_list` field of the collection list for permissible values for a given collection. */
        "c:resolve"?: string;
        /** @description Whether case sensitivity is enabled for string comparisongs. Defaults to true. Note that this impacts query performance, `ps2/character.name`, `ps2/outfit.name`, `ps2/outfit.alias` all provide lowercase variants for improved performance. */
        "c:case"?: "true" | "false" | "0" | "1";
        /** @description Return up to N results from the collection. Defaults to 1. */
        "c:limit"?: number;
        /** @description The `ps2/character` collection is distributed across 20 distinct databases. The per-DB limit may be more predictable in some use-cases. If set, `c:limit` will be ignored. For collections other than `ps2/character`, this parameter falls behaves exactly like `c:limit`. */
        "c:limitPerDB"?: number;
        /** @description Skips the first N results from the result list. Together with `c:limit`, can be used for pagination. Note that sorting may be required to get consistent orderings. Due to the multiple databases used, this behaves unusually for the `ps2/character` collection. */
        "c:start"?: number;
        /** @description Whether to include response keys for NULL values, rather than omitting them. Note that this does not return the canonical `null`, but the string `"NULL"`. */
        "c:includeNull"?: "true" | "false" | "1" | "0";
        /** @description By default, localized fields such as `ps2/item.name` will return results for all supported locales. This field allows specifying a single locale to return, greatly reducing response payload size. */
        "c:lang"?: "en" | "de" | "es" | "fr" | "it" | "tr";
        /** @description Similar to `c:resolve`, but allows specifying arbitrary subqueries to add to the response. For details, see the [Census API documentation](https://census.daybreakgames.com/#collection-joining) or the community [Census API Primer](https://github.com/leonhard-s/auraxium/wiki/Census-API-Primer#joined-queries). */
        "c:join"?: string;
        /** @description Allows rearranging lists of result into a tree. See the [Census API documentation](https://census.daybreakgames.com/#tree-reformatting) for deatils. */
        "c:tree"?: string;
        /** @description Adds the top-level field `timing` containing timing information to the result object. For queries using `c:resolve` or `c:join`, this also contains information about the subqueries. */
        "c:timing"?: "true" | "false" | "0" | "1";
        /** @description When performing fuzzy string queries, such as `^` (startswith) or `*` (contains), promote any match exactly matching the full input string to the top of the search list. Useful for user-facing name lookups. */
        "c:exactMatchFirst"?: "true" | "false" | "0" | "1";
        /** @description Instead of fetching results, list all distinct values for a given field. Note that this may include duplicate entries for `ps2/character` due to the multiple databases. Results are truncated to 20'000 values. */
        "c:distinct"?: string;
        /** @description By default, the API will retry any queries once before failing. By setting this value to `false`, you can fail earlier, which can be useful if you have your own retry mechanisms or logging configuration. */
        "c:retry"?: "true" | "false" | "0" | "1";
      };
      path: {
        /** @description The API game to access. */
        game: "ps2" | "ps2:v2" | "ps2ps4eu" | "ps2ps4eu:v2" | "ps2ps4us" | "ps2ps4us:v2";
        /** @description Name of the collection to access. */
        collection: "character" | "world" | "zone";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            /** Only included if `c:distinct` is used. */
            count?: number;
            returned?: number;
            /** Only included if `c:timing` is enabled. */
            timing?: {
              "total-ms"?: number;
            };
          };
        };
      };
      /** @description The Census API does not use HTTP status codes to indicate errors. */
      "4XX": never;
    };
  };
}
